{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.4.3\n"
     ]
    }
   ],
   "source": [
    "#dependencies needed\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import keras\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from pandas.plotting import register_matplotlib_converters\n",
    "register_matplotlib_converters()\n",
    "from keras.preprocessing.sequence import TimeseriesGenerator\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import LSTM\n",
    "from keras.layers import Dropout\n",
    "import tensorflow as tf\n",
    "print(keras.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"dataset_for_model.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframe = df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume_(BTC)</th>\n",
       "      <th>Polarity</th>\n",
       "      <th>tweet_volum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-04-16</td>\n",
       "      <td>8080.020306</td>\n",
       "      <td>7.546252</td>\n",
       "      <td>0.108300</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-04-17</td>\n",
       "      <td>8036.633618</td>\n",
       "      <td>6.442466</td>\n",
       "      <td>0.144570</td>\n",
       "      <td>129.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-04-18</td>\n",
       "      <td>8057.312993</td>\n",
       "      <td>6.407781</td>\n",
       "      <td>0.079355</td>\n",
       "      <td>88.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-04-19</td>\n",
       "      <td>8213.263314</td>\n",
       "      <td>6.560626</td>\n",
       "      <td>0.107818</td>\n",
       "      <td>94.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-04-20</td>\n",
       "      <td>8445.635604</td>\n",
       "      <td>11.152516</td>\n",
       "      <td>0.103734</td>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>2020-09-10</td>\n",
       "      <td>10338.715299</td>\n",
       "      <td>7.131391</td>\n",
       "      <td>0.147109</td>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>2020-09-11</td>\n",
       "      <td>10302.365012</td>\n",
       "      <td>3.658533</td>\n",
       "      <td>0.172471</td>\n",
       "      <td>106.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>2020-09-12</td>\n",
       "      <td>10372.443402</td>\n",
       "      <td>1.752966</td>\n",
       "      <td>0.099601</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>881</th>\n",
       "      <td>2020-09-13</td>\n",
       "      <td>10395.134226</td>\n",
       "      <td>3.022224</td>\n",
       "      <td>0.106865</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>2020-09-14</td>\n",
       "      <td>10332.370000</td>\n",
       "      <td>1.292006</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>883 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Timestamp         Close  Volume_(BTC)  Polarity  tweet_volum\n",
       "0    2018-04-16   8080.020306      7.546252  0.108300         63.0\n",
       "1    2018-04-17   8036.633618      6.442466  0.144570        129.0\n",
       "2    2018-04-18   8057.312993      6.407781  0.079355         88.0\n",
       "3    2018-04-19   8213.263314      6.560626  0.107818         94.0\n",
       "4    2018-04-20   8445.635604     11.152516  0.103734         75.0\n",
       "..          ...           ...           ...       ...          ...\n",
       "878  2020-09-10  10338.715299      7.131391  0.147109         68.0\n",
       "879  2020-09-11  10302.365012      3.658533  0.172471        106.0\n",
       "880  2020-09-12  10372.443402      1.752966  0.099601         90.0\n",
       "881  2020-09-13  10395.134226      3.022224  0.106865         90.0\n",
       "882  2020-09-14  10332.370000      1.292006  0.000000          1.0\n",
       "\n",
       "[883 rows x 5 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocessing for the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframe[\"Timestamp\"]= pd.to_datetime(dataframe.Timestamp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframe=dataframe.set_index(\"Timestamp\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume_(BTC)</th>\n",
       "      <th>Polarity</th>\n",
       "      <th>tweet_volum</th>\n",
       "      <th>close_delay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-04-16</th>\n",
       "      <td>8080.020306</td>\n",
       "      <td>7.546252</td>\n",
       "      <td>0.108300</td>\n",
       "      <td>63.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-17</th>\n",
       "      <td>8036.633618</td>\n",
       "      <td>6.442466</td>\n",
       "      <td>0.144570</td>\n",
       "      <td>129.0</td>\n",
       "      <td>8080.020306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-18</th>\n",
       "      <td>8057.312993</td>\n",
       "      <td>6.407781</td>\n",
       "      <td>0.079355</td>\n",
       "      <td>88.0</td>\n",
       "      <td>8036.633618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-19</th>\n",
       "      <td>8213.263314</td>\n",
       "      <td>6.560626</td>\n",
       "      <td>0.107818</td>\n",
       "      <td>94.0</td>\n",
       "      <td>8057.312993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-20</th>\n",
       "      <td>8445.635604</td>\n",
       "      <td>11.152516</td>\n",
       "      <td>0.103734</td>\n",
       "      <td>75.0</td>\n",
       "      <td>8213.263314</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Close  Volume_(BTC)  Polarity  tweet_volum  close_delay\n",
       "Timestamp                                                                \n",
       "2018-04-16  8080.020306      7.546252  0.108300         63.0          NaN\n",
       "2018-04-17  8036.633618      6.442466  0.144570        129.0  8080.020306\n",
       "2018-04-18  8057.312993      6.407781  0.079355         88.0  8036.633618\n",
       "2018-04-19  8213.263314      6.560626  0.107818         94.0  8057.312993\n",
       "2018-04-20  8445.635604     11.152516  0.103734         75.0  8213.263314"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe[\"close_delay\"] = dataframe[\"Close\"].shift(periods=1)\n",
    "dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(706, 5) (176, 5)\n"
     ]
    }
   ],
   "source": [
    "# split data into train and test sets\n",
    "\n",
    "test_size = int(len(dataframe) * 0.2) # test set will be 20% data\n",
    "train = dataframe.iloc[1: - test_size, :].copy()\n",
    "test = dataframe.iloc[- test_size:, :].copy()\n",
    "print(train.shape, test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume_(BTC)</th>\n",
       "      <th>Polarity</th>\n",
       "      <th>tweet_volum</th>\n",
       "      <th>close_delay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-04-17</th>\n",
       "      <td>8036.633618</td>\n",
       "      <td>6.442466</td>\n",
       "      <td>0.144570</td>\n",
       "      <td>129.0</td>\n",
       "      <td>8080.020306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-18</th>\n",
       "      <td>8057.312993</td>\n",
       "      <td>6.407781</td>\n",
       "      <td>0.079355</td>\n",
       "      <td>88.0</td>\n",
       "      <td>8036.633618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-19</th>\n",
       "      <td>8213.263314</td>\n",
       "      <td>6.560626</td>\n",
       "      <td>0.107818</td>\n",
       "      <td>94.0</td>\n",
       "      <td>8057.312993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-20</th>\n",
       "      <td>8445.635604</td>\n",
       "      <td>11.152516</td>\n",
       "      <td>0.103734</td>\n",
       "      <td>75.0</td>\n",
       "      <td>8213.263314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-21</th>\n",
       "      <td>8800.278313</td>\n",
       "      <td>10.650214</td>\n",
       "      <td>-0.000860</td>\n",
       "      <td>63.0</td>\n",
       "      <td>8445.635604</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Close  Volume_(BTC)  Polarity  tweet_volum  close_delay\n",
       "Timestamp                                                                \n",
       "2018-04-17  8036.633618      6.442466  0.144570        129.0  8080.020306\n",
       "2018-04-18  8057.312993      6.407781  0.079355         88.0  8036.633618\n",
       "2018-04-19  8213.263314      6.560626  0.107818         94.0  8057.312993\n",
       "2018-04-20  8445.635604     11.152516  0.103734         75.0  8213.263314\n",
       "2018-04-21  8800.278313     10.650214 -0.000860         63.0  8445.635604"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume_(BTC)</th>\n",
       "      <th>Polarity</th>\n",
       "      <th>tweet_volum</th>\n",
       "      <th>close_delay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-03-18</th>\n",
       "      <td>5286.562181</td>\n",
       "      <td>15.750551</td>\n",
       "      <td>0.138790</td>\n",
       "      <td>107.0</td>\n",
       "      <td>5313.417317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-19</th>\n",
       "      <td>5759.508901</td>\n",
       "      <td>17.314484</td>\n",
       "      <td>0.127755</td>\n",
       "      <td>92.0</td>\n",
       "      <td>5286.562181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-20</th>\n",
       "      <td>6360.618501</td>\n",
       "      <td>20.950193</td>\n",
       "      <td>0.171504</td>\n",
       "      <td>111.0</td>\n",
       "      <td>5759.508901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-21</th>\n",
       "      <td>6168.993736</td>\n",
       "      <td>8.368034</td>\n",
       "      <td>0.162361</td>\n",
       "      <td>50.0</td>\n",
       "      <td>6360.618501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-22</th>\n",
       "      <td>6139.398314</td>\n",
       "      <td>7.695943</td>\n",
       "      <td>0.091630</td>\n",
       "      <td>44.0</td>\n",
       "      <td>6168.993736</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Close  Volume_(BTC)  Polarity  tweet_volum  close_delay\n",
       "Timestamp                                                                \n",
       "2020-03-18  5286.562181     15.750551  0.138790        107.0  5313.417317\n",
       "2020-03-19  5759.508901     17.314484  0.127755         92.0  5286.562181\n",
       "2020-03-20  6360.618501     20.950193  0.171504        111.0  5759.508901\n",
       "2020-03-21  6168.993736      8.368034  0.162361         50.0  6360.618501\n",
       "2020-03-22  6139.398314      7.695943  0.091630         44.0  6168.993736"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume_(BTC)</th>\n",
       "      <th>Polarity</th>\n",
       "      <th>tweet_volum</th>\n",
       "      <th>close_delay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-03-23</th>\n",
       "      <td>6105.527945</td>\n",
       "      <td>13.261382</td>\n",
       "      <td>0.119839</td>\n",
       "      <td>62.0</td>\n",
       "      <td>6139.398314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-24</th>\n",
       "      <td>6653.005783</td>\n",
       "      <td>13.721471</td>\n",
       "      <td>0.082161</td>\n",
       "      <td>82.0</td>\n",
       "      <td>6105.527945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-25</th>\n",
       "      <td>6661.981810</td>\n",
       "      <td>11.591877</td>\n",
       "      <td>0.111325</td>\n",
       "      <td>118.0</td>\n",
       "      <td>6653.005783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-26</th>\n",
       "      <td>6671.903662</td>\n",
       "      <td>5.165156</td>\n",
       "      <td>0.167195</td>\n",
       "      <td>123.0</td>\n",
       "      <td>6661.981810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-27</th>\n",
       "      <td>6691.695215</td>\n",
       "      <td>7.544453</td>\n",
       "      <td>0.110741</td>\n",
       "      <td>103.0</td>\n",
       "      <td>6671.903662</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Close  Volume_(BTC)  Polarity  tweet_volum  close_delay\n",
       "Timestamp                                                                \n",
       "2020-03-23  6105.527945     13.261382  0.119839         62.0  6139.398314\n",
       "2020-03-24  6653.005783     13.721471  0.082161         82.0  6105.527945\n",
       "2020-03-25  6661.981810     11.591877  0.111325        118.0  6653.005783\n",
       "2020-03-26  6671.903662      5.165156  0.167195        123.0  6661.981810\n",
       "2020-03-27  6691.695215      7.544453  0.110741        103.0  6671.903662"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume_(BTC)</th>\n",
       "      <th>Polarity</th>\n",
       "      <th>tweet_volum</th>\n",
       "      <th>close_delay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-09-10</th>\n",
       "      <td>10338.715299</td>\n",
       "      <td>7.131391</td>\n",
       "      <td>0.147109</td>\n",
       "      <td>68.0</td>\n",
       "      <td>10187.324936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-11</th>\n",
       "      <td>10302.365012</td>\n",
       "      <td>3.658533</td>\n",
       "      <td>0.172471</td>\n",
       "      <td>106.0</td>\n",
       "      <td>10338.715299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-12</th>\n",
       "      <td>10372.443402</td>\n",
       "      <td>1.752966</td>\n",
       "      <td>0.099601</td>\n",
       "      <td>90.0</td>\n",
       "      <td>10302.365012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-13</th>\n",
       "      <td>10395.134226</td>\n",
       "      <td>3.022224</td>\n",
       "      <td>0.106865</td>\n",
       "      <td>90.0</td>\n",
       "      <td>10372.443402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-14</th>\n",
       "      <td>10332.370000</td>\n",
       "      <td>1.292006</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10395.134226</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Close  Volume_(BTC)  Polarity  tweet_volum   close_delay\n",
       "Timestamp                                                                  \n",
       "2020-09-10  10338.715299      7.131391  0.147109         68.0  10187.324936\n",
       "2020-09-11  10302.365012      3.658533  0.172471        106.0  10338.715299\n",
       "2020-09-12  10372.443402      1.752966  0.099601         90.0  10302.365012\n",
       "2020-09-13  10395.134226      3.022224  0.106865         90.0  10372.443402\n",
       "2020-09-14  10332.370000      1.292006  0.000000          1.0  10395.134226"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Close'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_col = \"Close\"\n",
    "y_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(706, 4) (706, 1)\n"
     ]
    }
   ],
   "source": [
    "# separate explanatory variables from the target variable in the training set\n",
    "X_train = train.drop(y_col, axis=1).copy()\n",
    "y_train = train[[y_col]].copy()\n",
    "print(X_train.shape, y_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fe0cc4e4d30>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 3600x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the split\n",
    "y_col = \"Close\"\n",
    "plt.figure(figsize=(50,10))\n",
    "plt.plot(train.index, train[y_col], label=\"Train\")\n",
    "plt.plot(test.index, test[y_col], label=\"Train\") \n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(706, 4) (706, 1)\n"
     ]
    }
   ],
   "source": [
    "# separate explanatory variables from the target variable in the training set\n",
    "X_train = train.drop(y_col, axis=1).copy()\n",
    "y_train = train[[y_col]].copy()\n",
    "print(X_train.shape, y_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Preprocessing for keras train dataset\n",
    "\n",
    "Xscaler = MinMaxScaler(feature_range=(0, 1)) # scale so that all the X data will range from 0 to 1\n",
    "#Xscaler.fit(X_train)\n",
    "scaled_X_train = Xscaler.fit_transform(X_train)\n",
    "Yscaler = MinMaxScaler(feature_range=(0, 1))\n",
    "#Yscaler.fit(y_train)\n",
    "scaled_y_train = y_train #Yscaler.fit_transform(y_train)\n",
    "#scaled_y_train = scaled_y_train.reshape(-1) # remove the second dimention from y so the shape changes from (n,1) to (n,)\n",
    "\n",
    "#scaled_y_train = np.insert(scaled_y_train, 0, 0)\n",
    "#scaled_y_train = np.delete(scaled_y_train, -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "706"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(scaled_X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(706, 4)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# using of TimeSeriesGenerator\n",
    "\n",
    "\n",
    "n_input = 10 #how many samples/rows/timesteps to look in the past in order to forecast the next sample\n",
    "n_features= X_train.shape[1] # how many predictors/Xs/features we have to predict y\n",
    "b_size = 10# Number of timeseries samples in each batch\n",
    "generator_train = TimeseriesGenerator(scaled_X_train, scaled_y_train.values, length=n_input, batch_size=b_size)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 10, 4)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "generator_train[0][0].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(176, 4) (176, 1)\n"
     ]
    }
   ],
   "source": [
    "X_test = test.drop(y_col, axis=1).copy()\n",
    "y_test = test[[y_col]].copy()\n",
    "print(X_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Preprocessing for keras test dataset\n",
    "\n",
    "#Xscaler = MinMaxScaler(feature_range=(0, 1)) # scale so that all the X data will range from 0 to 1\n",
    "#Xscaler.fit(X_test)\n",
    "scaled_X_test = Xscaler.transform(X_test)\n",
    "#Yscaler = MinMaxScaler(feature_range=(0, 1))\n",
    "#Yscaler.fit(y_train)\n",
    "\n",
    "scaled_y_test = y_test #Yscaler.transform(y_test) \n",
    "#scaled_y_test = scaled_y_test.reshape(-1) # remove the second dimention from y so the shape changes from (n,1) to (n,)\n",
    "\n",
    "#scaled_y_test = np.insert(scaled_y_test, 0, 0)\n",
    "#scaled_y_test = np.delete(scaled_y_test, -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "### generator test dataset\n",
    "generator_test = TimeseriesGenerator(scaled_X_test, scaled_y_test.values, length=n_input, batch_size=b_size)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[[0.28120418, 0.41661236, 1.29357798, 0.33030842],\n",
       "         [0.16525096, 0.54948171, 0.46330275, 0.37417326],\n",
       "         [0.08954177, 0.55478344, 0.34862385, 0.38370627],\n",
       "         [0.05168257, 0.25778305, 0.35779817, 0.37933769],\n",
       "         [0.21991086, 0.27253964, 0.37155963, 0.38188119],\n",
       "         [0.18403021, 0.34118456, 0.42201835, 0.41289672],\n",
       "         [0.13313849, 0.38541989, 0.44495413, 0.43693026],\n",
       "         [0.12678773, 0.57618361, 0.29357798, 0.43524807],\n",
       "         [0.16884716, 0.4261484 , 0.22477064, 0.4355932 ],\n",
       "         [0.0413923 , 0.409409  , 0.30275229, 0.40086392]],\n",
       " \n",
       "        [[0.16525096, 0.54948171, 0.46330275, 0.37417326],\n",
       "         [0.08954177, 0.55478344, 0.34862385, 0.38370627],\n",
       "         [0.05168257, 0.25778305, 0.35779817, 0.37933769],\n",
       "         [0.21991086, 0.27253964, 0.37155963, 0.38188119],\n",
       "         [0.18403021, 0.34118456, 0.42201835, 0.41289672],\n",
       "         [0.13313849, 0.38541989, 0.44495413, 0.43693026],\n",
       "         [0.12678773, 0.57618361, 0.29357798, 0.43524807],\n",
       "         [0.16884716, 0.4261484 , 0.22477064, 0.4355932 ],\n",
       "         [0.0413923 , 0.409409  , 0.30275229, 0.40086392],\n",
       "         [0.11098038, 0.70363233, 0.19724771, 0.38982395]],\n",
       " \n",
       "        [[0.08954177, 0.55478344, 0.34862385, 0.38370627],\n",
       "         [0.05168257, 0.25778305, 0.35779817, 0.37933769],\n",
       "         [0.21991086, 0.27253964, 0.37155963, 0.38188119],\n",
       "         [0.18403021, 0.34118456, 0.42201835, 0.41289672],\n",
       "         [0.13313849, 0.38541989, 0.44495413, 0.43693026],\n",
       "         [0.12678773, 0.57618361, 0.29357798, 0.43524807],\n",
       "         [0.16884716, 0.4261484 , 0.22477064, 0.4355932 ],\n",
       "         [0.0413923 , 0.409409  , 0.30275229, 0.40086392],\n",
       "         [0.11098038, 0.70363233, 0.19724771, 0.38982395],\n",
       "         [0.17028339, 0.54691842, 0.41284404, 0.39784866]],\n",
       " \n",
       "        [[0.05168257, 0.25778305, 0.35779817, 0.37933769],\n",
       "         [0.21991086, 0.27253964, 0.37155963, 0.38188119],\n",
       "         [0.18403021, 0.34118456, 0.42201835, 0.41289672],\n",
       "         [0.13313849, 0.38541989, 0.44495413, 0.43693026],\n",
       "         [0.12678773, 0.57618361, 0.29357798, 0.43524807],\n",
       "         [0.16884716, 0.4261484 , 0.22477064, 0.4355932 ],\n",
       "         [0.0413923 , 0.409409  , 0.30275229, 0.40086392],\n",
       "         [0.11098038, 0.70363233, 0.19724771, 0.38982395],\n",
       "         [0.17028339, 0.54691842, 0.41284404, 0.39784866],\n",
       "         [0.10854229, 0.6670161 , 0.46788991, 0.37714806]],\n",
       " \n",
       "        [[0.21991086, 0.27253964, 0.37155963, 0.38188119],\n",
       "         [0.18403021, 0.34118456, 0.42201835, 0.41289672],\n",
       "         [0.13313849, 0.38541989, 0.44495413, 0.43693026],\n",
       "         [0.12678773, 0.57618361, 0.29357798, 0.43524807],\n",
       "         [0.16884716, 0.4261484 , 0.22477064, 0.4355932 ],\n",
       "         [0.0413923 , 0.409409  , 0.30275229, 0.40086392],\n",
       "         [0.11098038, 0.70363233, 0.19724771, 0.38982395],\n",
       "         [0.17028339, 0.54691842, 0.41284404, 0.39784866],\n",
       "         [0.10854229, 0.6670161 , 0.46788991, 0.37714806],\n",
       "         [0.12461115, 0.43462761, 0.39449541, 0.39118511]],\n",
       " \n",
       "        [[0.18403021, 0.34118456, 0.42201835, 0.41289672],\n",
       "         [0.13313849, 0.38541989, 0.44495413, 0.43693026],\n",
       "         [0.12678773, 0.57618361, 0.29357798, 0.43524807],\n",
       "         [0.16884716, 0.4261484 , 0.22477064, 0.4355932 ],\n",
       "         [0.0413923 , 0.409409  , 0.30275229, 0.40086392],\n",
       "         [0.11098038, 0.70363233, 0.19724771, 0.38982395],\n",
       "         [0.17028339, 0.54691842, 0.41284404, 0.39784866],\n",
       "         [0.10854229, 0.6670161 , 0.46788991, 0.37714806],\n",
       "         [0.12461115, 0.43462761, 0.39449541, 0.39118511],\n",
       "         [0.2564431 , 0.56882769, 0.49541284, 0.38245347]],\n",
       " \n",
       "        [[0.13313849, 0.38541989, 0.44495413, 0.43693026],\n",
       "         [0.12678773, 0.57618361, 0.29357798, 0.43524807],\n",
       "         [0.16884716, 0.4261484 , 0.22477064, 0.4355932 ],\n",
       "         [0.0413923 , 0.409409  , 0.30275229, 0.40086392],\n",
       "         [0.11098038, 0.70363233, 0.19724771, 0.38982395],\n",
       "         [0.17028339, 0.54691842, 0.41284404, 0.39784866],\n",
       "         [0.10854229, 0.6670161 , 0.46788991, 0.37714806],\n",
       "         [0.12461115, 0.43462761, 0.39449541, 0.39118511],\n",
       "         [0.2564431 , 0.56882769, 0.49541284, 0.38245347],\n",
       "         [0.13194114, 0.2899246 , 0.4266055 , 0.39410379]],\n",
       " \n",
       "        [[0.12678773, 0.57618361, 0.29357798, 0.43524807],\n",
       "         [0.16884716, 0.4261484 , 0.22477064, 0.4355932 ],\n",
       "         [0.0413923 , 0.409409  , 0.30275229, 0.40086392],\n",
       "         [0.11098038, 0.70363233, 0.19724771, 0.38982395],\n",
       "         [0.17028339, 0.54691842, 0.41284404, 0.39784866],\n",
       "         [0.10854229, 0.6670161 , 0.46788991, 0.37714806],\n",
       "         [0.12461115, 0.43462761, 0.39449541, 0.39118511],\n",
       "         [0.2564431 , 0.56882769, 0.49541284, 0.38245347],\n",
       "         [0.13194114, 0.2899246 , 0.4266055 , 0.39410379],\n",
       "         [0.07317666, 0.52787233, 0.33027523, 0.41101508]],\n",
       " \n",
       "        [[0.16884716, 0.4261484 , 0.22477064, 0.4355932 ],\n",
       "         [0.0413923 , 0.409409  , 0.30275229, 0.40086392],\n",
       "         [0.11098038, 0.70363233, 0.19724771, 0.38982395],\n",
       "         [0.17028339, 0.54691842, 0.41284404, 0.39784866],\n",
       "         [0.10854229, 0.6670161 , 0.46788991, 0.37714806],\n",
       "         [0.12461115, 0.43462761, 0.39449541, 0.39118511],\n",
       "         [0.2564431 , 0.56882769, 0.49541284, 0.38245347],\n",
       "         [0.13194114, 0.2899246 , 0.4266055 , 0.39410379],\n",
       "         [0.07317666, 0.52787233, 0.33027523, 0.41101508],\n",
       "         [0.06579361, 0.54252038, 0.29357798, 0.41950362]],\n",
       " \n",
       "        [[0.0413923 , 0.409409  , 0.30275229, 0.40086392],\n",
       "         [0.11098038, 0.70363233, 0.19724771, 0.38982395],\n",
       "         [0.17028339, 0.54691842, 0.41284404, 0.39784866],\n",
       "         [0.10854229, 0.6670161 , 0.46788991, 0.37714806],\n",
       "         [0.12461115, 0.43462761, 0.39449541, 0.39118511],\n",
       "         [0.2564431 , 0.56882769, 0.49541284, 0.38245347],\n",
       "         [0.13194114, 0.2899246 , 0.4266055 , 0.39410379],\n",
       "         [0.07317666, 0.52787233, 0.33027523, 0.41101508],\n",
       "         [0.06579361, 0.54252038, 0.29357798, 0.41950362],\n",
       "         [0.18057168, 0.4923548 , 0.63761468, 0.421108  ]]]),\n",
       " array([[6947.63061902],\n",
       "        [6751.59922092],\n",
       "        [6884.52791188],\n",
       "        [6801.84062406],\n",
       "        [6912.16727806],\n",
       "        [7072.31456304],\n",
       "        [7152.69967001],\n",
       "        [7167.89293445],\n",
       "        [7052.45424264],\n",
       "        [6867.48799015]]))"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "generator_test[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 10, 4)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "generator_test[0][0].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_input"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Instancing the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "leaky = tf.keras.layers.LeakyReLU()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# instancing the model\n",
    "\n",
    "model2 = Sequential([\n",
    "    LSTM(units=128, return_sequences= True, input_shape=(n_input, n_features)),\n",
    "    LSTM(units=32, return_sequences=False),\n",
    "    Dense(units=16),#, activation=\"relu\"),\n",
    "    #Dropout(0.1),\n",
    "    leaky,\n",
    "    Dense(units=32),#, activation=\"relu\"),\n",
    "    leaky,\n",
    "    # if we have 20% are dead cless to avoid overfitting and creat better models\n",
    "    #model.add(LSTM(units=100, return_sequences=True))\n",
    "    # inputshape is only defined in the first layer\n",
    "    # the model is smart enough to understand which data to fit in the next layer\n",
    "    #model.add(Dropout(0.2))\n",
    "    # 0.2, 96 are hyperparameters\n",
    "    #model.add(LSTM(units=100))\n",
    "    #model2.add(Dropout(0.1)),\n",
    "    #normal layer\n",
    "    #model.add(Dense(units=1))\n",
    "    #Dropout(0.2),\n",
    "    Dense(units=1)\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'UnreadVariable' shape=(1,) dtype=float32, numpy=array([7176.548], dtype=float32)>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.trainable_variables[-1].assign(y_train.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm (LSTM)                  (None, 10, 128)           68096     \n",
      "_________________________________________________________________\n",
      "lstm_1 (LSTM)                (None, 32)                20608     \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 16)                528       \n",
      "_________________________________________________________________\n",
      "leaky_re_lu (LeakyReLU)      multiple                  0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 32)                544       \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 1)                 33        \n",
      "=================================================================\n",
      "Total params: 89,809\n",
      "Trainable params: 89,809\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# compiling\n",
    "opti = tf.keras.optimizers.Adam(1e-3)\n",
    "model2.compile(optimizer=opti, loss= tf.keras.losses.MAPE)\n",
    "model2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From <ipython-input-29-f12e7d97290c>:1: Model.fit_generator (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use Model.fit, which supports generators.\n",
      "Epoch 1/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 31.7315 - val_loss: 23.6777\n",
      "Epoch 2/200\n",
      "70/70 [==============================] - 1s 13ms/step - loss: 31.6630 - val_loss: 23.6405\n",
      "Epoch 3/200\n",
      "70/70 [==============================] - 1s 12ms/step - loss: 31.3743 - val_loss: 23.2844\n",
      "Epoch 4/200\n",
      "70/70 [==============================] - 1s 15ms/step - loss: 30.8477 - val_loss: 22.6961\n",
      "Epoch 5/200\n",
      "70/70 [==============================] - 1s 14ms/step - loss: 29.6304 - val_loss: 23.7132\n",
      "Epoch 6/200\n",
      "70/70 [==============================] - 1s 14ms/step - loss: 27.5167 - val_loss: 20.0914\n",
      "Epoch 7/200\n",
      "70/70 [==============================] - 1s 13ms/step - loss: 24.9985 - val_loss: 19.8768\n",
      "Epoch 8/200\n",
      "70/70 [==============================] - 1s 15ms/step - loss: 24.0320 - val_loss: 18.4911\n",
      "Epoch 9/200\n",
      "70/70 [==============================] - 1s 14ms/step - loss: 21.2527 - val_loss: 14.4576\n",
      "Epoch 10/200\n",
      "70/70 [==============================] - 1s 14ms/step - loss: 21.1979 - val_loss: 13.5131\n",
      "Epoch 11/200\n",
      "70/70 [==============================] - 1s 13ms/step - loss: 16.9415 - val_loss: 12.5244\n",
      "Epoch 12/200\n",
      "70/70 [==============================] - 1s 14ms/step - loss: 14.6803 - val_loss: 12.9995\n",
      "Epoch 13/200\n",
      "70/70 [==============================] - 1s 16ms/step - loss: 12.3509 - val_loss: 9.3193\n",
      "Epoch 14/200\n",
      "70/70 [==============================] - 1s 14ms/step - loss: 11.2735 - val_loss: 12.0539\n",
      "Epoch 15/200\n",
      "70/70 [==============================] - 1s 18ms/step - loss: 9.2468 - val_loss: 7.3462\n",
      "Epoch 16/200\n",
      "70/70 [==============================] - 1s 18ms/step - loss: 8.0446 - val_loss: 8.2748\n",
      "Epoch 17/200\n",
      "70/70 [==============================] - 1s 16ms/step - loss: 7.5898 - val_loss: 10.5704\n",
      "Epoch 18/200\n",
      "70/70 [==============================] - 1s 18ms/step - loss: 10.3993 - val_loss: 9.4718\n",
      "Epoch 19/200\n",
      "70/70 [==============================] - 1s 14ms/step - loss: 8.1939 - val_loss: 8.3495\n",
      "Epoch 20/200\n",
      "70/70 [==============================] - 1s 17ms/step - loss: 7.8577 - val_loss: 11.5131\n",
      "Epoch 21/200\n",
      "70/70 [==============================] - 1s 14ms/step - loss: 7.2255 - val_loss: 7.6658\n",
      "Epoch 22/200\n",
      "70/70 [==============================] - 1s 19ms/step - loss: 7.1917 - val_loss: 6.4260\n",
      "Epoch 23/200\n",
      "70/70 [==============================] - 1s 20ms/step - loss: 7.2212 - val_loss: 9.2592\n",
      "Epoch 24/200\n",
      "70/70 [==============================] - 1s 20ms/step - loss: 7.0322 - val_loss: 8.4145\n",
      "Epoch 25/200\n",
      "70/70 [==============================] - 1s 18ms/step - loss: 6.6973 - val_loss: 6.6895\n",
      "Epoch 26/200\n",
      "70/70 [==============================] - 1s 20ms/step - loss: 6.6348 - val_loss: 7.1779\n",
      "Epoch 27/200\n",
      "70/70 [==============================] - 1s 19ms/step - loss: 6.6211 - val_loss: 9.9606\n",
      "Epoch 28/200\n",
      "70/70 [==============================] - 1s 20ms/step - loss: 7.4014 - val_loss: 11.0679\n",
      "Epoch 29/200\n",
      "70/70 [==============================] - 1s 19ms/step - loss: 6.4212 - val_loss: 7.0419\n",
      "Epoch 30/200\n",
      "70/70 [==============================] - 1s 16ms/step - loss: 6.4929 - val_loss: 7.4018\n",
      "Epoch 31/200\n",
      "70/70 [==============================] - 1s 15ms/step - loss: 6.3767 - val_loss: 6.7972\n",
      "Epoch 32/200\n",
      "70/70 [==============================] - 1s 15ms/step - loss: 6.5061 - val_loss: 6.6385\n",
      "Epoch 33/200\n",
      "70/70 [==============================] - 1s 14ms/step - loss: 6.1703 - val_loss: 10.8411\n",
      "Epoch 34/200\n",
      "70/70 [==============================] - 1s 16ms/step - loss: 6.2710 - val_loss: 6.2794\n",
      "Epoch 35/200\n",
      "70/70 [==============================] - 1s 16ms/step - loss: 6.0892 - val_loss: 5.8884\n",
      "Epoch 36/200\n",
      "70/70 [==============================] - 1s 19ms/step - loss: 6.0347 - val_loss: 6.2831\n",
      "Epoch 37/200\n",
      "70/70 [==============================] - 1s 16ms/step - loss: 6.0705 - val_loss: 8.4718\n",
      "Epoch 38/200\n",
      "70/70 [==============================] - 1s 15ms/step - loss: 5.6910 - val_loss: 7.1974\n",
      "Epoch 39/200\n",
      "70/70 [==============================] - 1s 14ms/step - loss: 5.6556 - val_loss: 11.7547\n",
      "Epoch 40/200\n",
      "70/70 [==============================] - 1s 19ms/step - loss: 5.6256 - val_loss: 6.7404\n",
      "Epoch 41/200\n",
      "70/70 [==============================] - 1s 16ms/step - loss: 5.3848 - val_loss: 6.4280\n",
      "Epoch 42/200\n",
      "70/70 [==============================] - 1s 14ms/step - loss: 6.1893 - val_loss: 8.0393\n",
      "Epoch 43/200\n",
      "70/70 [==============================] - 1s 20ms/step - loss: 6.0675 - val_loss: 6.7427\n",
      "Epoch 44/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 5.1787 - val_loss: 5.5852\n",
      "Epoch 45/200\n",
      "70/70 [==============================] - 1s 20ms/step - loss: 5.5057 - val_loss: 5.6653\n",
      "Epoch 46/200\n",
      "70/70 [==============================] - 1s 20ms/step - loss: 5.0416 - val_loss: 7.1463\n",
      "Epoch 47/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 5.2000 - val_loss: 4.8206\n",
      "Epoch 48/200\n",
      "70/70 [==============================] - 2s 21ms/step - loss: 4.9997 - val_loss: 4.7955\n",
      "Epoch 49/200\n",
      "70/70 [==============================] - 1s 20ms/step - loss: 5.1629 - val_loss: 6.5616\n",
      "Epoch 50/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 5.2382 - val_loss: 5.2462\n",
      "Epoch 51/200\n",
      "70/70 [==============================] - 1s 20ms/step - loss: 4.8851 - val_loss: 7.2004\n",
      "Epoch 52/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 4.9465 - val_loss: 7.8860\n",
      "Epoch 53/200\n",
      "70/70 [==============================] - 2s 21ms/step - loss: 5.5409 - val_loss: 4.9127\n",
      "Epoch 54/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 5.4247 - val_loss: 9.3951\n",
      "Epoch 55/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.9096 - val_loss: 6.0088\n",
      "Epoch 56/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 5.1131 - val_loss: 5.9797\n",
      "Epoch 57/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 5.0219 - val_loss: 6.4050\n",
      "Epoch 58/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.6240 - val_loss: 5.8234\n",
      "Epoch 59/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.6784 - val_loss: 6.9466\n",
      "Epoch 60/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.8391 - val_loss: 4.7832\n",
      "Epoch 61/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 5.0776 - val_loss: 11.4954\n",
      "Epoch 62/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.8238 - val_loss: 4.5911\n",
      "Epoch 63/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.5830 - val_loss: 6.7443\n",
      "Epoch 64/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.6756 - val_loss: 8.2907\n",
      "Epoch 65/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 4.7585 - val_loss: 4.8194\n",
      "Epoch 66/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.5474 - val_loss: 5.0259\n",
      "Epoch 67/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.6351 - val_loss: 6.9004\n",
      "Epoch 68/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.3155 - val_loss: 5.5388\n",
      "Epoch 69/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.2547 - val_loss: 6.8307\n",
      "Epoch 70/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.4040 - val_loss: 6.1867\n",
      "Epoch 71/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.6661 - val_loss: 4.8741\n",
      "Epoch 72/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.9229 - val_loss: 5.1212\n",
      "Epoch 73/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 4.2703 - val_loss: 4.2829\n",
      "Epoch 74/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 4.1342 - val_loss: 4.9798\n",
      "Epoch 75/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 4.6053 - val_loss: 5.3440\n",
      "Epoch 76/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.3468 - val_loss: 4.6628\n",
      "Epoch 77/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.4096 - val_loss: 4.5491\n",
      "Epoch 78/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 4.0599 - val_loss: 6.9023\n",
      "Epoch 79/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.0405 - val_loss: 5.0432\n",
      "Epoch 80/200\n",
      "70/70 [==============================] - 2s 23ms/step - loss: 4.1562 - val_loss: 4.6465\n",
      "Epoch 81/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.3478 - val_loss: 4.2493\n",
      "Epoch 82/200\n",
      "70/70 [==============================] - 2s 23ms/step - loss: 4.0454 - val_loss: 4.6592\n",
      "Epoch 83/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.1009 - val_loss: 4.7824\n",
      "Epoch 84/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.2995 - val_loss: 4.6728\n",
      "Epoch 85/200\n",
      "70/70 [==============================] - 2s 21ms/step - loss: 3.9216 - val_loss: 4.3238\n",
      "Epoch 86/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 4.3261 - val_loss: 4.2935\n",
      "Epoch 87/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.0994 - val_loss: 4.4997\n",
      "Epoch 88/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.7091 - val_loss: 5.3013\n",
      "Epoch 89/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.8429 - val_loss: 5.2709\n",
      "Epoch 90/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.0135 - val_loss: 8.7282\n",
      "Epoch 91/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.9083 - val_loss: 5.3148\n",
      "Epoch 92/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.8236 - val_loss: 4.5798\n",
      "Epoch 93/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.8561 - val_loss: 5.3119\n",
      "Epoch 94/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.9261 - val_loss: 4.0988\n",
      "Epoch 95/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.6918 - val_loss: 4.4017\n",
      "Epoch 96/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.6815 - val_loss: 4.9245\n",
      "Epoch 97/200\n",
      "70/70 [==============================] - 2s 21ms/step - loss: 4.0504 - val_loss: 4.1633\n",
      "Epoch 98/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.8431 - val_loss: 5.1255\n",
      "Epoch 99/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.9402 - val_loss: 4.4900\n",
      "Epoch 100/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.6667 - val_loss: 3.9069\n",
      "Epoch 101/200\n",
      "70/70 [==============================] - 2s 21ms/step - loss: 3.6277 - val_loss: 4.0044\n",
      "Epoch 102/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.4414 - val_loss: 5.6228\n",
      "Epoch 103/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.5757 - val_loss: 5.5399\n",
      "Epoch 104/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.7575 - val_loss: 4.1952\n",
      "Epoch 105/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.6913 - val_loss: 3.6987\n",
      "Epoch 106/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.6781 - val_loss: 4.1165\n",
      "Epoch 107/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.5906 - val_loss: 3.7609\n",
      "Epoch 108/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.9410 - val_loss: 5.1687\n",
      "Epoch 109/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.6192 - val_loss: 4.1016\n",
      "Epoch 110/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 4.0092 - val_loss: 4.1267\n",
      "Epoch 111/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.5371 - val_loss: 4.0659\n",
      "Epoch 112/200\n",
      "70/70 [==============================] - 2s 24ms/step - loss: 3.5654 - val_loss: 5.4010\n",
      "Epoch 113/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.4250 - val_loss: 3.9983\n",
      "Epoch 114/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.6828 - val_loss: 3.9831\n",
      "Epoch 115/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.3491 - val_loss: 4.0334\n",
      "Epoch 116/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.2710 - val_loss: 3.8354\n",
      "Epoch 117/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.4078 - val_loss: 6.6445\n",
      "Epoch 118/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.3373 - val_loss: 4.4454\n",
      "Epoch 119/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.2264 - val_loss: 4.0273\n",
      "Epoch 120/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.3490 - val_loss: 4.3792\n",
      "Epoch 121/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.4021 - val_loss: 3.7369\n",
      "Epoch 122/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.3592 - val_loss: 4.5189\n",
      "Epoch 123/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.2368 - val_loss: 3.8763\n",
      "Epoch 124/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.9416 - val_loss: 3.7627\n",
      "Epoch 125/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.2922 - val_loss: 3.8810\n",
      "Epoch 126/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.1828 - val_loss: 4.7850\n",
      "Epoch 127/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.6274 - val_loss: 4.4134\n",
      "Epoch 128/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.5215 - val_loss: 4.0407\n",
      "Epoch 129/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.5497 - val_loss: 4.4534\n",
      "Epoch 130/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.6871 - val_loss: 3.3948\n",
      "Epoch 131/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.2964 - val_loss: 4.1939\n",
      "Epoch 132/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.3147 - val_loss: 4.3126\n",
      "Epoch 133/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.1087 - val_loss: 3.6746\n",
      "Epoch 134/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.2049 - val_loss: 4.2822\n",
      "Epoch 135/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.1911 - val_loss: 3.9966\n",
      "Epoch 136/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.2825 - val_loss: 3.9793\n",
      "Epoch 137/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.2135 - val_loss: 5.9709\n",
      "Epoch 138/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.6377 - val_loss: 4.9456\n",
      "Epoch 139/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.1964 - val_loss: 4.5798\n",
      "Epoch 140/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.1534 - val_loss: 5.5908\n",
      "Epoch 141/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.6290 - val_loss: 3.7169\n",
      "Epoch 142/200\n",
      "70/70 [==============================] - 2s 21ms/step - loss: 3.1996 - val_loss: 5.1458\n",
      "Epoch 143/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.2009 - val_loss: 4.6837\n",
      "Epoch 144/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.0532 - val_loss: 4.0695\n",
      "Epoch 145/200\n",
      "70/70 [==============================] - 2s 21ms/step - loss: 3.0226 - val_loss: 4.7124\n",
      "Epoch 146/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.2375 - val_loss: 3.7722\n",
      "Epoch 147/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.1718 - val_loss: 4.0012\n",
      "Epoch 148/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.2082 - val_loss: 4.1269\n",
      "Epoch 149/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.2642 - val_loss: 3.6107\n",
      "Epoch 150/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.9791 - val_loss: 5.2602\n",
      "Epoch 151/200\n",
      "70/70 [==============================] - 2s 21ms/step - loss: 3.0560 - val_loss: 3.6880\n",
      "Epoch 152/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.0978 - val_loss: 4.0149\n",
      "Epoch 153/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.2371 - val_loss: 4.4932\n",
      "Epoch 154/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.3193 - val_loss: 4.3430\n",
      "Epoch 155/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 3.0406 - val_loss: 4.4156\n",
      "Epoch 156/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.0719 - val_loss: 4.0645\n",
      "Epoch 157/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 2.9942 - val_loss: 3.5489\n",
      "Epoch 158/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.7991 - val_loss: 5.0733\n",
      "Epoch 159/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.1618 - val_loss: 4.4785\n",
      "Epoch 160/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.0226 - val_loss: 4.2523\n",
      "Epoch 161/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.9972 - val_loss: 3.7593\n",
      "Epoch 162/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.1313 - val_loss: 3.8248\n",
      "Epoch 163/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.9236 - val_loss: 4.0769\n",
      "Epoch 164/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.8844 - val_loss: 3.8434\n",
      "Epoch 165/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.1168 - val_loss: 3.8408\n",
      "Epoch 166/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.3124 - val_loss: 4.9397\n",
      "Epoch 167/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.9461 - val_loss: 3.7624\n",
      "Epoch 168/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.7188 - val_loss: 3.9013\n",
      "Epoch 169/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.9012 - val_loss: 3.8197\n",
      "Epoch 170/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.9245 - val_loss: 4.0279\n",
      "Epoch 171/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.8902 - val_loss: 4.0274\n",
      "Epoch 172/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.9317 - val_loss: 3.8408\n",
      "Epoch 173/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.9016 - val_loss: 4.6416\n",
      "Epoch 174/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.8586 - val_loss: 4.4591\n",
      "Epoch 175/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.0161 - val_loss: 3.5555\n",
      "Epoch 176/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 2.8058 - val_loss: 3.6305\n",
      "Epoch 177/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.9085 - val_loss: 4.2806\n",
      "Epoch 178/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.9024 - val_loss: 5.4133\n",
      "Epoch 179/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.8806 - val_loss: 3.8186\n",
      "Epoch 180/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 2.8736 - val_loss: 4.0369\n",
      "Epoch 181/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.7181 - val_loss: 3.8595\n",
      "Epoch 182/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.9225 - val_loss: 3.9840\n",
      "Epoch 183/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.9009 - val_loss: 4.5871\n",
      "Epoch 184/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.8090 - val_loss: 4.0860\n",
      "Epoch 185/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 3.0909 - val_loss: 4.8835\n",
      "Epoch 186/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.8683 - val_loss: 4.0424\n",
      "Epoch 187/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.7390 - val_loss: 3.7334\n",
      "Epoch 188/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.6864 - val_loss: 4.0900\n",
      "Epoch 189/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.7712 - val_loss: 3.5242\n",
      "Epoch 190/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.7618 - val_loss: 4.0883\n",
      "Epoch 191/200\n",
      "70/70 [==============================] - 2s 23ms/step - loss: 2.5667 - val_loss: 4.4700\n",
      "Epoch 192/200\n",
      "70/70 [==============================] - 2s 22ms/step - loss: 2.9196 - val_loss: 4.8003\n",
      "Epoch 193/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.8356 - val_loss: 4.7775\n",
      "Epoch 194/200\n",
      "70/70 [==============================] - 2s 26ms/step - loss: 2.7145 - val_loss: 4.9250\n",
      "Epoch 195/200\n",
      "70/70 [==============================] - 2s 23ms/step - loss: 2.7071 - val_loss: 4.0956\n",
      "Epoch 196/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.7672 - val_loss: 4.9812\n",
      "Epoch 197/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.7093 - val_loss: 4.6466\n",
      "Epoch 198/200\n",
      "70/70 [==============================] - 1s 20ms/step - loss: 2.7265 - val_loss: 4.0336\n",
      "Epoch 199/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.6603 - val_loss: 4.4242\n",
      "Epoch 200/200\n",
      "70/70 [==============================] - 1s 21ms/step - loss: 2.5895 - val_loss: 4.1521\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7fe0c3147610>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.fit_generator(generator_train, validation_data=generator_test ,epochs=200)\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fe0b3a5b9d0>]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "loss_per_epoch = model2.history.history[\"loss\"]\n",
    "val_loss_per_epoch = model2.history.history[\"val_loss\"]\n",
    "plt.plot(range(len(loss_per_epoch)), loss_per_epoch)\n",
    "plt.plot(range(len(val_loss_per_epoch)),val_loss_per_epoch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_test = model2.predict(generator_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_train = model2.predict(generator_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Volume_(BTC)</th>\n",
       "      <th>Polarity</th>\n",
       "      <th>tweet_volum</th>\n",
       "      <th>close_delay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-04-17</th>\n",
       "      <td>6.442466</td>\n",
       "      <td>0.144570</td>\n",
       "      <td>129.0</td>\n",
       "      <td>8080.020306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-18</th>\n",
       "      <td>6.407781</td>\n",
       "      <td>0.079355</td>\n",
       "      <td>88.0</td>\n",
       "      <td>8036.633618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-19</th>\n",
       "      <td>6.560626</td>\n",
       "      <td>0.107818</td>\n",
       "      <td>94.0</td>\n",
       "      <td>8057.312993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-20</th>\n",
       "      <td>11.152516</td>\n",
       "      <td>0.103734</td>\n",
       "      <td>75.0</td>\n",
       "      <td>8213.263314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-21</th>\n",
       "      <td>10.650214</td>\n",
       "      <td>-0.000860</td>\n",
       "      <td>63.0</td>\n",
       "      <td>8445.635604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-18</th>\n",
       "      <td>15.750551</td>\n",
       "      <td>0.138790</td>\n",
       "      <td>107.0</td>\n",
       "      <td>5313.417317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-19</th>\n",
       "      <td>17.314484</td>\n",
       "      <td>0.127755</td>\n",
       "      <td>92.0</td>\n",
       "      <td>5286.562181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-20</th>\n",
       "      <td>20.950193</td>\n",
       "      <td>0.171504</td>\n",
       "      <td>111.0</td>\n",
       "      <td>5759.508901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-21</th>\n",
       "      <td>8.368034</td>\n",
       "      <td>0.162361</td>\n",
       "      <td>50.0</td>\n",
       "      <td>6360.618501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-22</th>\n",
       "      <td>7.695943</td>\n",
       "      <td>0.091630</td>\n",
       "      <td>44.0</td>\n",
       "      <td>6168.993736</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>706 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Volume_(BTC)  Polarity  tweet_volum  close_delay\n",
       "Timestamp                                                   \n",
       "2018-04-17      6.442466  0.144570        129.0  8080.020306\n",
       "2018-04-18      6.407781  0.079355         88.0  8036.633618\n",
       "2018-04-19      6.560626  0.107818         94.0  8057.312993\n",
       "2018-04-20     11.152516  0.103734         75.0  8213.263314\n",
       "2018-04-21     10.650214 -0.000860         63.0  8445.635604\n",
       "...                  ...       ...          ...          ...\n",
       "2020-03-18     15.750551  0.138790        107.0  5313.417317\n",
       "2020-03-19     17.314484  0.127755         92.0  5286.562181\n",
       "2020-03-20     20.950193  0.171504        111.0  5759.508901\n",
       "2020-03-21      8.368034  0.162361         50.0  6360.618501\n",
       "2020-03-22      7.695943  0.091630         44.0  6168.993736\n",
       "\n",
       "[706 rows x 4 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Volume_(BTC)</th>\n",
       "      <th>Polarity</th>\n",
       "      <th>tweet_volum</th>\n",
       "      <th>close_delay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-04-27</th>\n",
       "      <td>7.899663</td>\n",
       "      <td>0.124423</td>\n",
       "      <td>88.0</td>\n",
       "      <td>8883.210299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-28</th>\n",
       "      <td>10.804446</td>\n",
       "      <td>0.130611</td>\n",
       "      <td>14.0</td>\n",
       "      <td>9217.020847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-29</th>\n",
       "      <td>7.600349</td>\n",
       "      <td>0.108126</td>\n",
       "      <td>21.0</td>\n",
       "      <td>9240.572972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-30</th>\n",
       "      <td>5.615061</td>\n",
       "      <td>0.072475</td>\n",
       "      <td>70.0</td>\n",
       "      <td>9356.163624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-01</th>\n",
       "      <td>8.429350</td>\n",
       "      <td>0.107469</td>\n",
       "      <td>175.0</td>\n",
       "      <td>9290.616042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-18</th>\n",
       "      <td>15.750551</td>\n",
       "      <td>0.138790</td>\n",
       "      <td>107.0</td>\n",
       "      <td>5313.417317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-19</th>\n",
       "      <td>17.314484</td>\n",
       "      <td>0.127755</td>\n",
       "      <td>92.0</td>\n",
       "      <td>5286.562181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-20</th>\n",
       "      <td>20.950193</td>\n",
       "      <td>0.171504</td>\n",
       "      <td>111.0</td>\n",
       "      <td>5759.508901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-21</th>\n",
       "      <td>8.368034</td>\n",
       "      <td>0.162361</td>\n",
       "      <td>50.0</td>\n",
       "      <td>6360.618501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-22</th>\n",
       "      <td>7.695943</td>\n",
       "      <td>0.091630</td>\n",
       "      <td>44.0</td>\n",
       "      <td>6168.993736</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>696 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Volume_(BTC)  Polarity  tweet_volum  close_delay\n",
       "Timestamp                                                   \n",
       "2018-04-27      7.899663  0.124423         88.0  8883.210299\n",
       "2018-04-28     10.804446  0.130611         14.0  9217.020847\n",
       "2018-04-29      7.600349  0.108126         21.0  9240.572972\n",
       "2018-04-30      5.615061  0.072475         70.0  9356.163624\n",
       "2018-05-01      8.429350  0.107469        175.0  9290.616042\n",
       "...                  ...       ...          ...          ...\n",
       "2020-03-18     15.750551  0.138790        107.0  5313.417317\n",
       "2020-03-19     17.314484  0.127755         92.0  5286.562181\n",
       "2020-03-20     20.950193  0.171504        111.0  5759.508901\n",
       "2020-03-21      8.368034  0.162361         50.0  6360.618501\n",
       "2020-03-22      7.695943  0.091630         44.0  6168.993736\n",
       "\n",
       "[696 rows x 4 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.iloc[- len(y_pred_train):,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fe0b7904460>"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(8,4))\n",
    "plt.plot(X_train.iloc[- len(y_pred_train):,:].index, y_train.iloc[- len(y_pred_train):,:], color='red', label='original bitcoin train set')\n",
    "ax.plot(X_train.iloc[- len(y_pred_train):,:].index, y_pred_train, color=\"blue\", label=\"predicted train set\")\n",
    "\n",
    "plt.legend()\n",
    "#print(range(len(y_train)+50, len(y_train)+50+len(y_pred_train)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fe0b7c54fa0>"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(8,4))\n",
    "plt.plot(X_test.iloc[- len(y_pred_test):,:].index, y_test.iloc[- len(y_pred_test):,:], color='red', label='original price test set')\n",
    "ax.plot(X_test.iloc[- len(y_pred_test):,:].index, y_pred_test, color=\"blue\", label=\"predicted bitcoin test set\")\n",
    "\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(166, 1)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(696, 1)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[9386.013671875],\n",
       " [9287.4775390625],\n",
       " [9374.35546875],\n",
       " [9248.4931640625],\n",
       " [9167.0712890625],\n",
       " [9149.642578125],\n",
       " [9218.283203125],\n",
       " [9339.1953125],\n",
       " [9606.482421875],\n",
       " [9755.9677734375],\n",
       " [9740.37890625],\n",
       " [9400.697265625],\n",
       " [9173.806640625],\n",
       " [9255.591796875],\n",
       " [9164.7919921875],\n",
       " [9024.64453125],\n",
       " [8665.5205078125],\n",
       " [8672.7216796875],\n",
       " [8756.984375],\n",
       " [8637.3896484375],\n",
       " [8612.0400390625],\n",
       " [8373.814453125],\n",
       " [8351.75],\n",
       " [8174.462890625],\n",
       " [8267.3203125],\n",
       " [8229.6103515625],\n",
       " [8158.0029296875],\n",
       " [7569.26953125],\n",
       " [7514.86376953125],\n",
       " [7511.22119140625],\n",
       " [7406.12109375],\n",
       " [7421.65966796875],\n",
       " [7409.16796875],\n",
       " [7460.181640625],\n",
       " [7452.9755859375],\n",
       " [7481.46875],\n",
       " [7514.91162109375],\n",
       " [7506.9482421875],\n",
       " [7586.98291015625],\n",
       " [7504.99462890625],\n",
       " [7613.91064453125],\n",
       " [7569.26220703125],\n",
       " [7566.8955078125],\n",
       " [7711.16943359375],\n",
       " [7637.37255859375],\n",
       " [7610.22412109375],\n",
       " [6984.9814453125],\n",
       " [6841.88232421875],\n",
       " [6696.6474609375],\n",
       " [6498.11865234375],\n",
       " [6546.09619140625],\n",
       " [6573.1806640625],\n",
       " [6449.6259765625],\n",
       " [6490.03515625],\n",
       " [6599.75],\n",
       " [6718.3681640625],\n",
       " [6541.189453125],\n",
       " [6311.865234375],\n",
       " [6413.771484375],\n",
       " [6222.1044921875],\n",
       " [6166.2734375],\n",
       " [6396.578125],\n",
       " [6364.009765625],\n",
       " [6303.0439453125],\n",
       " [6296.23828125],\n",
       " [6291.470703125],\n",
       " [6526.01025390625],\n",
       " [6603.00927734375],\n",
       " [6612.54541015625],\n",
       " [6644.76904296875],\n",
       " [6647.95703125],\n",
       " [6646.57568359375],\n",
       " [6635.318359375],\n",
       " [6645.9716796875],\n",
       " [6733.19677734375],\n",
       " [6623.0322265625],\n",
       " [6456.291015625],\n",
       " [6306.53125],\n",
       " [6249.9189453125],\n",
       " [6323.9443359375],\n",
       " [6316.0927734375],\n",
       " [6321.666015625],\n",
       " [6571.77685546875],\n",
       " [7085.63330078125],\n",
       " [7490.32568359375],\n",
       " [7328.1328125],\n",
       " [7523.54931640625],\n",
       " [7700.2275390625],\n",
       " [7999.33349609375],\n",
       " [8189.072265625],\n",
       " [8209.083984375],\n",
       " [8178.22412109375],\n",
       " [8201.541015625],\n",
       " [8069.384765625],\n",
       " [8114.4580078125],\n",
       " [8026.9072265625],\n",
       " [8081.13525390625],\n",
       " [7792.9609375],\n",
       " [7506.7802734375],\n",
       " [7422.93603515625],\n",
       " [7216.65673828125],\n",
       " [7115.64892578125],\n",
       " [7006.001953125],\n",
       " [7004.72802734375],\n",
       " [6885.87353515625],\n",
       " [6522.37255859375],\n",
       " [6334.0634765625],\n",
       " [6399.7109375],\n",
       " [6291.41259765625],\n",
       " [6249.333984375],\n",
       " [6349.27587890625],\n",
       " [6177.5595703125],\n",
       " [6507.798828125],\n",
       " [6520.75244140625],\n",
       " [6457.51123046875],\n",
       " [6458.96826171875],\n",
       " [6519.8828125],\n",
       " [6607.0048828125],\n",
       " [6402.41796875],\n",
       " [6608.74560546875],\n",
       " [6606.31640625],\n",
       " [6575.2490234375],\n",
       " [6757.1298828125],\n",
       " [6665.00732421875],\n",
       " [6690.7314453125],\n",
       " [6918.955078125],\n",
       " [6987.21875],\n",
       " [6987.44873046875],\n",
       " [7115.60107421875],\n",
       " [7416.06689453125],\n",
       " [7416.37646484375],\n",
       " [7169.09423828125],\n",
       " [6931.630859375],\n",
       " [6705.85693359375],\n",
       " [6387.552734375],\n",
       " [6368.4755859375],\n",
       " [6354.2265625],\n",
       " [6272.1123046875],\n",
       " [6330.58251953125],\n",
       " [6508.5029296875],\n",
       " [6446.7568359375],\n",
       " [6513.095703125],\n",
       " [6576.41357421875],\n",
       " [6630.73681640625],\n",
       " [6562.75927734375],\n",
       " [6543.6005859375],\n",
       " [6459.3193359375],\n",
       " [6515.080078125],\n",
       " [6488.783203125],\n",
       " [6652.11962890625],\n",
       " [6669.1689453125],\n",
       " [6620.779296875],\n",
       " [6517.1474609375],\n",
       " [6425.0517578125],\n",
       " [6436.2412109375],\n",
       " [6438.3369140625],\n",
       " [6557.3720703125],\n",
       " [6450.63525390625],\n",
       " [6454.9521484375],\n",
       " [6496.85693359375],\n",
       " [6487.97998046875],\n",
       " [6433.642578125],\n",
       " [6494.048828125],\n",
       " [6482.38720703125],\n",
       " [6498.576171875],\n",
       " [6453.68017578125],\n",
       " [6480.74169921875],\n",
       " [6444.4306640625],\n",
       " [6320.138671875],\n",
       " [6126.595703125],\n",
       " [6051.8447265625],\n",
       " [6096.40380859375],\n",
       " [6133.0224609375],\n",
       " [6344.8837890625],\n",
       " [6413.12451171875],\n",
       " [6371.79345703125],\n",
       " [6405.99365234375],\n",
       " [6458.1923828125],\n",
       " [6521.4267578125],\n",
       " [6579.64404296875],\n",
       " [6499.96875],\n",
       " [6384.841796875],\n",
       " [6354.29296875],\n",
       " [6419.23046875],\n",
       " [6410.26025390625],\n",
       " [6395.35595703125],\n",
       " [6304.642578125],\n",
       " [6420.876953125],\n",
       " [6420.40673828125],\n",
       " [6365.28955078125],\n",
       " [6444.60009765625],\n",
       " [6408.50341796875],\n",
       " [6315.34716796875],\n",
       " [6356.326171875],\n",
       " [6404.13232421875],\n",
       " [6368.01904296875],\n",
       " [6381.158203125],\n",
       " [6373.97607421875],\n",
       " [6348.4560546875],\n",
       " [6260.55322265625],\n",
       " [6272.51220703125],\n",
       " [6263.7626953125],\n",
       " [5966.41845703125],\n",
       " [5535.60986328125],\n",
       " [5388.19140625],\n",
       " [5398.18603515625],\n",
       " [5206.072265625],\n",
       " [4822.1298828125],\n",
       " [4548.314453125],\n",
       " [4458.30517578125],\n",
       " [4233.111328125],\n",
       " [3982.26806640625],\n",
       " [3882.596435546875],\n",
       " [3867.2978515625],\n",
       " [3876.70556640625],\n",
       " [3996.36376953125],\n",
       " [4163.62109375],\n",
       " [4065.39599609375],\n",
       " [3922.7890625],\n",
       " [3924.388427734375],\n",
       " [3933.89599609375],\n",
       " [3931.329833984375],\n",
       " [3910.4990234375],\n",
       " [3629.212890625],\n",
       " [3543.537109375],\n",
       " [3558.419921875],\n",
       " [3553.349609375],\n",
       " [3672.201171875],\n",
       " [3616.734375],\n",
       " [3588.29345703125],\n",
       " [3587.09228515625],\n",
       " [3600.488525390625],\n",
       " [3628.9853515625],\n",
       " [3583.50537109375],\n",
       " [3573.354248046875],\n",
       " [3570.69189453125],\n",
       " [3568.67529296875],\n",
       " [3561.736328125],\n",
       " [3576.37109375],\n",
       " [3574.05859375],\n",
       " [3589.751220703125],\n",
       " [3657.69189453125],\n",
       " [3767.72802734375],\n",
       " [3751.27197265625],\n",
       " [3772.1015625],\n",
       " [3775.1806640625],\n",
       " [3718.33349609375],\n",
       " [3875.2001953125],\n",
       " [3871.5107421875],\n",
       " [3877.7109375],\n",
       " [3904.7373046875],\n",
       " [3923.275390625],\n",
       " [3924.84619140625],\n",
       " [3923.436767578125],\n",
       " [3925.1162109375],\n",
       " [3922.326171875],\n",
       " [3917.568603515625],\n",
       " [3897.71630859375],\n",
       " [3851.45263671875],\n",
       " [3827.47021484375],\n",
       " [3745.863037109375],\n",
       " [3643.391845703125],\n",
       " [3580.77490234375],\n",
       " [3558.34375],\n",
       " [3555.92724609375],\n",
       " [3558.73828125],\n",
       " [3567.766845703125],\n",
       " [3578.138671875],\n",
       " [3676.63232421875],\n",
       " [3651.189453125],\n",
       " [3726.5244140625],\n",
       " [3706.75439453125],\n",
       " [3644.132080078125],\n",
       " [3597.6279296875],\n",
       " [3566.81494140625],\n",
       " [3559.875],\n",
       " [3563.135009765625],\n",
       " [3581.986328125],\n",
       " [3561.639892578125],\n",
       " [3565.77001953125],\n",
       " [3607.41064453125],\n",
       " [3591.82373046875],\n",
       " [3563.61962890625],\n",
       " [3552.86962890625],\n",
       " [3544.533203125],\n",
       " [3545.84765625],\n",
       " [3550.294921875],\n",
       " [3557.1240234375],\n",
       " [3572.515380859375],\n",
       " [3646.0859375],\n",
       " [3716.597412109375],\n",
       " [3646.621826171875],\n",
       " [3606.14404296875],\n",
       " [3581.50146484375],\n",
       " [3597.923828125],\n",
       " [3623.55322265625],\n",
       " [3687.5771484375],\n",
       " [3879.14306640625],\n",
       " [3875.8740234375],\n",
       " [3877.59033203125],\n",
       " [3872.0849609375],\n",
       " [3899.21630859375],\n",
       " [3918.0927734375],\n",
       " [3919.18310546875],\n",
       " [3910.302978515625],\n",
       " [3912.4697265625],\n",
       " [3916.202392578125],\n",
       " [3920.553955078125],\n",
       " [3900.322265625],\n",
       " [3873.97998046875],\n",
       " [3849.671142578125],\n",
       " [3818.90966796875],\n",
       " [3737.55224609375],\n",
       " [3611.513671875],\n",
       " [3550.737060546875],\n",
       " [3557.05517578125],\n",
       " [3571.27734375],\n",
       " [3573.824462890625],\n",
       " [3659.064697265625],\n",
       " [3805.1611328125],\n",
       " [3871.513671875],\n",
       " [3884.79833984375],\n",
       " [3914.464111328125],\n",
       " [3933.24072265625],\n",
       " [3938.11279296875],\n",
       " [3931.239501953125],\n",
       " [3917.013916015625],\n",
       " [3913.009033203125],\n",
       " [3916.04541015625],\n",
       " [3918.166015625],\n",
       " [3926.97265625],\n",
       " [3939.70263671875],\n",
       " [3952.688232421875],\n",
       " [3958.945068359375],\n",
       " [3970.70654296875],\n",
       " [4022.93115234375],\n",
       " [4083.62841796875],\n",
       " [4125.55322265625],\n",
       " [4123.7490234375],\n",
       " [4158.11767578125],\n",
       " [4264.6474609375],\n",
       " [4667.23876953125],\n",
       " [4962.3583984375],\n",
       " [5014.38623046875],\n",
       " [5035.05859375],\n",
       " [5131.4677734375],\n",
       " [5180.7763671875],\n",
       " [5206.314453125],\n",
       " [5199.43359375],\n",
       " [5076.73388671875],\n",
       " [5009.05419921875],\n",
       " [5001.2568359375],\n",
       " [5058.0849609375],\n",
       " [5018.82080078125],\n",
       " [5127.03515625],\n",
       " [5180.6220703125],\n",
       " [5163.6083984375],\n",
       " [5232.80419921875],\n",
       " [5263.1796875],\n",
       " [5242.3095703125],\n",
       " [5277.9462890625],\n",
       " [5373.873046875],\n",
       " [5401.57080078125],\n",
       " [5416.6240234375],\n",
       " [5375.361328125],\n",
       " [5321.80859375],\n",
       " [5155.08251953125],\n",
       " [5170.46142578125],\n",
       " [5231.69091796875],\n",
       " [5335.865234375],\n",
       " [5334.806640625],\n",
       " [5404.6494140625],\n",
       " [5533.13232421875],\n",
       " [5500.20703125],\n",
       " [5693.052734375],\n",
       " [6010.5810546875],\n",
       " [6064.82958984375],\n",
       " [6051.84033203125],\n",
       " [6436.38427734375],\n",
       " [6755.7529296875],\n",
       " [6876.8720703125],\n",
       " [7582.2587890625],\n",
       " [8174.87060546875],\n",
       " [8300.8369140625],\n",
       " [8211.5400390625],\n",
       " [7730.49169921875],\n",
       " [7627.38232421875],\n",
       " [8053.310546875],\n",
       " [7938.9765625],\n",
       " [8116.81640625],\n",
       " [8004.6748046875],\n",
       " [8048.0732421875],\n",
       " [8205.2607421875],\n",
       " [8138.41064453125],\n",
       " [8519.767578125],\n",
       " [8687.45703125],\n",
       " [8503.3427734375],\n",
       " [8850.984375],\n",
       " [8754.5087890625],\n",
       " [8498.62109375],\n",
       " [8905.1181640625],\n",
       " [8863.5791015625],\n",
       " [8609.6240234375],\n",
       " [8033.93701171875],\n",
       " [7975.21044921875],\n",
       " [7942.1533203125],\n",
       " [8081.5615234375],\n",
       " [8073.57421875],\n",
       " [8041.81103515625],\n",
       " [7924.82861328125],\n",
       " [7986.87060546875],\n",
       " [8187.6611328125],\n",
       " [8263.65625],\n",
       " [8486.890625],\n",
       " [8641.4814453125],\n",
       " [8922.203125],\n",
       " [9472.83203125],\n",
       " [9493.0498046875],\n",
       " [9523.5166015625],\n",
       " [9686.810546875],\n",
       " [10223.41796875],\n",
       " [10635.2744140625],\n",
       " [10584.91796875],\n",
       " [11091.935546875],\n",
       " [11102.328125],\n",
       " [10847.3173828125],\n",
       " [10877.345703125],\n",
       " [11744.7578125],\n",
       " [11874.5322265625],\n",
       " [11612.71875],\n",
       " [10737.2255859375],\n",
       " [10406.6474609375],\n",
       " [11240.162109375],\n",
       " [11105.4267578125],\n",
       " [11491.849609375],\n",
       " [11833.08984375],\n",
       " [11634.5009765625],\n",
       " [11429.7109375],\n",
       " [11696.8125],\n",
       " [11740.373046875],\n",
       " [11639.490234375],\n",
       " [11818.431640625],\n",
       " [11746.4453125],\n",
       " [11275.646484375],\n",
       " [10474.5625],\n",
       " [10354.3828125],\n",
       " [9537.3798828125],\n",
       " [10078.724609375],\n",
       " [10509.099609375],\n",
       " [10677.7587890625],\n",
       " [10716.15625],\n",
       " [10758.548828125],\n",
       " [10527.5263671875],\n",
       " [10390.849609375],\n",
       " [9968.7265625],\n",
       " [9646.7177734375],\n",
       " [9936.572265625],\n",
       " [9778.28515625],\n",
       " [9877.8955078125],\n",
       " [9631.228515625],\n",
       " [9726.4296875],\n",
       " [9688.8984375],\n",
       " [9940.349609375],\n",
       " [10129.0107421875],\n",
       " [10538.939453125],\n",
       " [10939.39453125],\n",
       " [11162.033203125],\n",
       " [11665.84375],\n",
       " [11834.314453125],\n",
       " [11822.90625],\n",
       " [11563.560546875],\n",
       " [11367.001953125],\n",
       " [11341.234375],\n",
       " [10942.484375],\n",
       " [10567.5458984375],\n",
       " [10388.48828125],\n",
       " [10175.603515625],\n",
       " [10138.244140625],\n",
       " [10438.7265625],\n",
       " [10341.060546875],\n",
       " [10139.041015625],\n",
       " [10335.490234375],\n",
       " [10486.7890625],\n",
       " [10300.275390625],\n",
       " [10305.5244140625],\n",
       " [10208.197265625],\n",
       " [10032.177734375],\n",
       " [9876.955078125],\n",
       " [9984.36328125],\n",
       " [9856.73046875],\n",
       " [9993.5712890625],\n",
       " [9710.138671875],\n",
       " [9816.9140625],\n",
       " [10065.91796875],\n",
       " [10244.17578125],\n",
       " [10457.904296875],\n",
       " [10800.2216796875],\n",
       " [10955.2158203125],\n",
       " [10844.8095703125],\n",
       " [10549.994140625],\n",
       " [10210.701171875],\n",
       " [10382.009765625],\n",
       " [10313.869140625],\n",
       " [10540.0322265625],\n",
       " [10431.734375],\n",
       " [10501.6025390625],\n",
       " [10441.01171875],\n",
       " [10340.310546875],\n",
       " [10166.4306640625],\n",
       " [10068.2998046875],\n",
       " [10079.611328125],\n",
       " [10131.4306640625],\n",
       " [10062.3447265625],\n",
       " [10098.6162109375],\n",
       " [9861.681640625],\n",
       " [9644.5302734375],\n",
       " [8768.58984375],\n",
       " [8829.755859375],\n",
       " [8315.236328125],\n",
       " [8343.2490234375],\n",
       " [8082.513671875],\n",
       " [8115.67138671875],\n",
       " [8461.9365234375],\n",
       " [8406.111328125],\n",
       " [8365.814453125],\n",
       " [8191.6572265625],\n",
       " [8374.9970703125],\n",
       " [8358.8408203125],\n",
       " [8335.791015625],\n",
       " [8191.4501953125],\n",
       " [8314.0625],\n",
       " [8412.193359375],\n",
       " [8496.15234375],\n",
       " [8571.927734375],\n",
       " [8474.037109375],\n",
       " [8348.40625],\n",
       " [8285.8662109375],\n",
       " [8227.5380859375],\n",
       " [8218.4208984375],\n",
       " [7968.16650390625],\n",
       " [7931.5595703125],\n",
       " [7875.88671875],\n",
       " [7753.994140625],\n",
       " [7938.56494140625],\n",
       " [7969.70947265625],\n",
       " [7723.19970703125],\n",
       " [7668.06494140625],\n",
       " [7046.40283203125],\n",
       " [7671.4130859375],\n",
       " [9553.0400390625],\n",
       " [9408.6923828125],\n",
       " [9343.18359375],\n",
       " [9380.18359375],\n",
       " [9338.6103515625],\n",
       " [9306.916015625],\n",
       " [9268.15625],\n",
       " [9281.80078125],\n",
       " [9279.1640625],\n",
       " [9448.603515625],\n",
       " [9443.5546875],\n",
       " [9337.3212890625],\n",
       " [9181.2412109375],\n",
       " [9131.05078125],\n",
       " [8832.4375],\n",
       " [8786.134765625],\n",
       " [8703.77734375],\n",
       " [8614.294921875],\n",
       " [8561.3251953125],\n",
       " [8392.3525390625],\n",
       " [8363.166015625],\n",
       " [8185.93994140625],\n",
       " [8165.72509765625],\n",
       " [8091.4697265625],\n",
       " [7845.09228515625],\n",
       " [7774.529296875],\n",
       " [7319.26025390625],\n",
       " [7174.44580078125],\n",
       " [7070.42236328125],\n",
       " [7107.29248046875],\n",
       " [7270.53173828125],\n",
       " [7224.82177734375],\n",
       " [7409.5810546875],\n",
       " [7546.70166015625],\n",
       " [7588.861328125],\n",
       " [7588.33447265625],\n",
       " [7427.50341796875],\n",
       " [7351.65625],\n",
       " [7309.7197265625],\n",
       " [7317.57958984375],\n",
       " [7336.228515625],\n",
       " [7370.34423828125],\n",
       " [7405.740234375],\n",
       " [7405.68896484375],\n",
       " [7421.896484375],\n",
       " [7290.1796875],\n",
       " [7211.97998046875],\n",
       " [7226.19580078125],\n",
       " [7234.41650390625],\n",
       " [7148.443359375],\n",
       " [7137.82666015625],\n",
       " [7158.81494140625],\n",
       " [6882.658203125],\n",
       " [6959.017578125],\n",
       " [7283.34228515625],\n",
       " [7283.115234375],\n",
       " [7201.7802734375],\n",
       " [7305.3076171875],\n",
       " [7404.33935546875],\n",
       " [7150.25439453125],\n",
       " [7185.32421875],\n",
       " [7309.29443359375],\n",
       " [7293.0390625],\n",
       " [7343.5576171875],\n",
       " [7423.24560546875],\n",
       " [7453.07275390625],\n",
       " [7351.27392578125],\n",
       " [7346.79296875],\n",
       " [7145.89306640625],\n",
       " [7339.6123046875],\n",
       " [7428.53662109375],\n",
       " [7449.939453125],\n",
       " [7588.30859375],\n",
       " [8011.44921875],\n",
       " [8288.91796875],\n",
       " [8084.31298828125],\n",
       " [8022.419921875],\n",
       " [8335.8271484375],\n",
       " [8354.908203125],\n",
       " [8411.8427734375],\n",
       " [8846.693359375],\n",
       " [9129.232421875],\n",
       " [8866.2998046875],\n",
       " [8982.5439453125],\n",
       " [8704.751953125],\n",
       " [8849.1953125],\n",
       " [8628.85546875],\n",
       " [8434.7705078125],\n",
       " [8462.166015625],\n",
       " [8323.72265625],\n",
       " [8431.7333984375],\n",
       " [8471.4755859375],\n",
       " [8859.3232421875],\n",
       " [9246.966796875],\n",
       " [9527.40625],\n",
       " [9696.966796875],\n",
       " [9584.83203125],\n",
       " [9565.572265625],\n",
       " [9612.443359375],\n",
       " [9529.744140625],\n",
       " [9424.01953125],\n",
       " [9139.509765625],\n",
       " [9460.744140625],\n",
       " [9780.732421875],\n",
       " [9860.662109375],\n",
       " [9870.498046875],\n",
       " [10080.6201171875],\n",
       " [9965.1455078125],\n",
       " [9921.603515625],\n",
       " [10216.55859375],\n",
       " [10163.9404296875],\n",
       " [10209.4775390625],\n",
       " [10007.125],\n",
       " [9947.783203125],\n",
       " [9819.478515625],\n",
       " [9852.052734375],\n",
       " [10046.232421875],\n",
       " [9602.3681640625],\n",
       " [9753.7734375],\n",
       " [9574.263671875],\n",
       " [9595.900390625],\n",
       " [9406.64453125],\n",
       " [9191.9443359375],\n",
       " [8847.8291015625],\n",
       " [8729.4921875],\n",
       " [8743.5537109375],\n",
       " [8768.99609375],\n",
       " [8582.0595703125],\n",
       " [8800.001953125],\n",
       " [8969.3515625],\n",
       " [8884.720703125],\n",
       " [9165.55078125],\n",
       " [9063.33984375],\n",
       " [8955.9658203125],\n",
       " [8478.515625],\n",
       " [7852.54150390625],\n",
       " [7836.1865234375],\n",
       " [5993.7763671875],\n",
       " [5471.9052734375],\n",
       " [5444.3955078125],\n",
       " [5140.56640625],\n",
       " [5311.76171875],\n",
       " [5413.8359375],\n",
       " [5810.7939453125],\n",
       " [6301.1845703125],\n",
       " [6210.81591796875],\n",
       " [6191.7158203125]]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list1 = y_pred_train.tolist()\n",
    "list1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[9386.013671875,\n",
       " 9287.4775390625,\n",
       " 9374.35546875,\n",
       " 9248.4931640625,\n",
       " 9167.0712890625,\n",
       " 9149.642578125,\n",
       " 9218.283203125,\n",
       " 9339.1953125,\n",
       " 9606.482421875,\n",
       " 9755.9677734375,\n",
       " 9740.37890625,\n",
       " 9400.697265625,\n",
       " 9173.806640625,\n",
       " 9255.591796875,\n",
       " 9164.7919921875,\n",
       " 9024.64453125,\n",
       " 8665.5205078125,\n",
       " 8672.7216796875,\n",
       " 8756.984375,\n",
       " 8637.3896484375,\n",
       " 8612.0400390625,\n",
       " 8373.814453125,\n",
       " 8351.75,\n",
       " 8174.462890625,\n",
       " 8267.3203125,\n",
       " 8229.6103515625,\n",
       " 8158.0029296875,\n",
       " 7569.26953125,\n",
       " 7514.86376953125,\n",
       " 7511.22119140625,\n",
       " 7406.12109375,\n",
       " 7421.65966796875,\n",
       " 7409.16796875,\n",
       " 7460.181640625,\n",
       " 7452.9755859375,\n",
       " 7481.46875,\n",
       " 7514.91162109375,\n",
       " 7506.9482421875,\n",
       " 7586.98291015625,\n",
       " 7504.99462890625,\n",
       " 7613.91064453125,\n",
       " 7569.26220703125,\n",
       " 7566.8955078125,\n",
       " 7711.16943359375,\n",
       " 7637.37255859375,\n",
       " 7610.22412109375,\n",
       " 6984.9814453125,\n",
       " 6841.88232421875,\n",
       " 6696.6474609375,\n",
       " 6498.11865234375,\n",
       " 6546.09619140625,\n",
       " 6573.1806640625,\n",
       " 6449.6259765625,\n",
       " 6490.03515625,\n",
       " 6599.75,\n",
       " 6718.3681640625,\n",
       " 6541.189453125,\n",
       " 6311.865234375,\n",
       " 6413.771484375,\n",
       " 6222.1044921875,\n",
       " 6166.2734375,\n",
       " 6396.578125,\n",
       " 6364.009765625,\n",
       " 6303.0439453125,\n",
       " 6296.23828125,\n",
       " 6291.470703125,\n",
       " 6526.01025390625,\n",
       " 6603.00927734375,\n",
       " 6612.54541015625,\n",
       " 6644.76904296875,\n",
       " 6647.95703125,\n",
       " 6646.57568359375,\n",
       " 6635.318359375,\n",
       " 6645.9716796875,\n",
       " 6733.19677734375,\n",
       " 6623.0322265625,\n",
       " 6456.291015625,\n",
       " 6306.53125,\n",
       " 6249.9189453125,\n",
       " 6323.9443359375,\n",
       " 6316.0927734375,\n",
       " 6321.666015625,\n",
       " 6571.77685546875,\n",
       " 7085.63330078125,\n",
       " 7490.32568359375,\n",
       " 7328.1328125,\n",
       " 7523.54931640625,\n",
       " 7700.2275390625,\n",
       " 7999.33349609375,\n",
       " 8189.072265625,\n",
       " 8209.083984375,\n",
       " 8178.22412109375,\n",
       " 8201.541015625,\n",
       " 8069.384765625,\n",
       " 8114.4580078125,\n",
       " 8026.9072265625,\n",
       " 8081.13525390625,\n",
       " 7792.9609375,\n",
       " 7506.7802734375,\n",
       " 7422.93603515625,\n",
       " 7216.65673828125,\n",
       " 7115.64892578125,\n",
       " 7006.001953125,\n",
       " 7004.72802734375,\n",
       " 6885.87353515625,\n",
       " 6522.37255859375,\n",
       " 6334.0634765625,\n",
       " 6399.7109375,\n",
       " 6291.41259765625,\n",
       " 6249.333984375,\n",
       " 6349.27587890625,\n",
       " 6177.5595703125,\n",
       " 6507.798828125,\n",
       " 6520.75244140625,\n",
       " 6457.51123046875,\n",
       " 6458.96826171875,\n",
       " 6519.8828125,\n",
       " 6607.0048828125,\n",
       " 6402.41796875,\n",
       " 6608.74560546875,\n",
       " 6606.31640625,\n",
       " 6575.2490234375,\n",
       " 6757.1298828125,\n",
       " 6665.00732421875,\n",
       " 6690.7314453125,\n",
       " 6918.955078125,\n",
       " 6987.21875,\n",
       " 6987.44873046875,\n",
       " 7115.60107421875,\n",
       " 7416.06689453125,\n",
       " 7416.37646484375,\n",
       " 7169.09423828125,\n",
       " 6931.630859375,\n",
       " 6705.85693359375,\n",
       " 6387.552734375,\n",
       " 6368.4755859375,\n",
       " 6354.2265625,\n",
       " 6272.1123046875,\n",
       " 6330.58251953125,\n",
       " 6508.5029296875,\n",
       " 6446.7568359375,\n",
       " 6513.095703125,\n",
       " 6576.41357421875,\n",
       " 6630.73681640625,\n",
       " 6562.75927734375,\n",
       " 6543.6005859375,\n",
       " 6459.3193359375,\n",
       " 6515.080078125,\n",
       " 6488.783203125,\n",
       " 6652.11962890625,\n",
       " 6669.1689453125,\n",
       " 6620.779296875,\n",
       " 6517.1474609375,\n",
       " 6425.0517578125,\n",
       " 6436.2412109375,\n",
       " 6438.3369140625,\n",
       " 6557.3720703125,\n",
       " 6450.63525390625,\n",
       " 6454.9521484375,\n",
       " 6496.85693359375,\n",
       " 6487.97998046875,\n",
       " 6433.642578125,\n",
       " 6494.048828125,\n",
       " 6482.38720703125,\n",
       " 6498.576171875,\n",
       " 6453.68017578125,\n",
       " 6480.74169921875,\n",
       " 6444.4306640625,\n",
       " 6320.138671875,\n",
       " 6126.595703125,\n",
       " 6051.8447265625,\n",
       " 6096.40380859375,\n",
       " 6133.0224609375,\n",
       " 6344.8837890625,\n",
       " 6413.12451171875,\n",
       " 6371.79345703125,\n",
       " 6405.99365234375,\n",
       " 6458.1923828125,\n",
       " 6521.4267578125,\n",
       " 6579.64404296875,\n",
       " 6499.96875,\n",
       " 6384.841796875,\n",
       " 6354.29296875,\n",
       " 6419.23046875,\n",
       " 6410.26025390625,\n",
       " 6395.35595703125,\n",
       " 6304.642578125,\n",
       " 6420.876953125,\n",
       " 6420.40673828125,\n",
       " 6365.28955078125,\n",
       " 6444.60009765625,\n",
       " 6408.50341796875,\n",
       " 6315.34716796875,\n",
       " 6356.326171875,\n",
       " 6404.13232421875,\n",
       " 6368.01904296875,\n",
       " 6381.158203125,\n",
       " 6373.97607421875,\n",
       " 6348.4560546875,\n",
       " 6260.55322265625,\n",
       " 6272.51220703125,\n",
       " 6263.7626953125,\n",
       " 5966.41845703125,\n",
       " 5535.60986328125,\n",
       " 5388.19140625,\n",
       " 5398.18603515625,\n",
       " 5206.072265625,\n",
       " 4822.1298828125,\n",
       " 4548.314453125,\n",
       " 4458.30517578125,\n",
       " 4233.111328125,\n",
       " 3982.26806640625,\n",
       " 3882.596435546875,\n",
       " 3867.2978515625,\n",
       " 3876.70556640625,\n",
       " 3996.36376953125,\n",
       " 4163.62109375,\n",
       " 4065.39599609375,\n",
       " 3922.7890625,\n",
       " 3924.388427734375,\n",
       " 3933.89599609375,\n",
       " 3931.329833984375,\n",
       " 3910.4990234375,\n",
       " 3629.212890625,\n",
       " 3543.537109375,\n",
       " 3558.419921875,\n",
       " 3553.349609375,\n",
       " 3672.201171875,\n",
       " 3616.734375,\n",
       " 3588.29345703125,\n",
       " 3587.09228515625,\n",
       " 3600.488525390625,\n",
       " 3628.9853515625,\n",
       " 3583.50537109375,\n",
       " 3573.354248046875,\n",
       " 3570.69189453125,\n",
       " 3568.67529296875,\n",
       " 3561.736328125,\n",
       " 3576.37109375,\n",
       " 3574.05859375,\n",
       " 3589.751220703125,\n",
       " 3657.69189453125,\n",
       " 3767.72802734375,\n",
       " 3751.27197265625,\n",
       " 3772.1015625,\n",
       " 3775.1806640625,\n",
       " 3718.33349609375,\n",
       " 3875.2001953125,\n",
       " 3871.5107421875,\n",
       " 3877.7109375,\n",
       " 3904.7373046875,\n",
       " 3923.275390625,\n",
       " 3924.84619140625,\n",
       " 3923.436767578125,\n",
       " 3925.1162109375,\n",
       " 3922.326171875,\n",
       " 3917.568603515625,\n",
       " 3897.71630859375,\n",
       " 3851.45263671875,\n",
       " 3827.47021484375,\n",
       " 3745.863037109375,\n",
       " 3643.391845703125,\n",
       " 3580.77490234375,\n",
       " 3558.34375,\n",
       " 3555.92724609375,\n",
       " 3558.73828125,\n",
       " 3567.766845703125,\n",
       " 3578.138671875,\n",
       " 3676.63232421875,\n",
       " 3651.189453125,\n",
       " 3726.5244140625,\n",
       " 3706.75439453125,\n",
       " 3644.132080078125,\n",
       " 3597.6279296875,\n",
       " 3566.81494140625,\n",
       " 3559.875,\n",
       " 3563.135009765625,\n",
       " 3581.986328125,\n",
       " 3561.639892578125,\n",
       " 3565.77001953125,\n",
       " 3607.41064453125,\n",
       " 3591.82373046875,\n",
       " 3563.61962890625,\n",
       " 3552.86962890625,\n",
       " 3544.533203125,\n",
       " 3545.84765625,\n",
       " 3550.294921875,\n",
       " 3557.1240234375,\n",
       " 3572.515380859375,\n",
       " 3646.0859375,\n",
       " 3716.597412109375,\n",
       " 3646.621826171875,\n",
       " 3606.14404296875,\n",
       " 3581.50146484375,\n",
       " 3597.923828125,\n",
       " 3623.55322265625,\n",
       " 3687.5771484375,\n",
       " 3879.14306640625,\n",
       " 3875.8740234375,\n",
       " 3877.59033203125,\n",
       " 3872.0849609375,\n",
       " 3899.21630859375,\n",
       " 3918.0927734375,\n",
       " 3919.18310546875,\n",
       " 3910.302978515625,\n",
       " 3912.4697265625,\n",
       " 3916.202392578125,\n",
       " 3920.553955078125,\n",
       " 3900.322265625,\n",
       " 3873.97998046875,\n",
       " 3849.671142578125,\n",
       " 3818.90966796875,\n",
       " 3737.55224609375,\n",
       " 3611.513671875,\n",
       " 3550.737060546875,\n",
       " 3557.05517578125,\n",
       " 3571.27734375,\n",
       " 3573.824462890625,\n",
       " 3659.064697265625,\n",
       " 3805.1611328125,\n",
       " 3871.513671875,\n",
       " 3884.79833984375,\n",
       " 3914.464111328125,\n",
       " 3933.24072265625,\n",
       " 3938.11279296875,\n",
       " 3931.239501953125,\n",
       " 3917.013916015625,\n",
       " 3913.009033203125,\n",
       " 3916.04541015625,\n",
       " 3918.166015625,\n",
       " 3926.97265625,\n",
       " 3939.70263671875,\n",
       " 3952.688232421875,\n",
       " 3958.945068359375,\n",
       " 3970.70654296875,\n",
       " 4022.93115234375,\n",
       " 4083.62841796875,\n",
       " 4125.55322265625,\n",
       " 4123.7490234375,\n",
       " 4158.11767578125,\n",
       " 4264.6474609375,\n",
       " 4667.23876953125,\n",
       " 4962.3583984375,\n",
       " 5014.38623046875,\n",
       " 5035.05859375,\n",
       " 5131.4677734375,\n",
       " 5180.7763671875,\n",
       " 5206.314453125,\n",
       " 5199.43359375,\n",
       " 5076.73388671875,\n",
       " 5009.05419921875,\n",
       " 5001.2568359375,\n",
       " 5058.0849609375,\n",
       " 5018.82080078125,\n",
       " 5127.03515625,\n",
       " 5180.6220703125,\n",
       " 5163.6083984375,\n",
       " 5232.80419921875,\n",
       " 5263.1796875,\n",
       " 5242.3095703125,\n",
       " 5277.9462890625,\n",
       " 5373.873046875,\n",
       " 5401.57080078125,\n",
       " 5416.6240234375,\n",
       " 5375.361328125,\n",
       " 5321.80859375,\n",
       " 5155.08251953125,\n",
       " 5170.46142578125,\n",
       " 5231.69091796875,\n",
       " 5335.865234375,\n",
       " 5334.806640625,\n",
       " 5404.6494140625,\n",
       " 5533.13232421875,\n",
       " 5500.20703125,\n",
       " 5693.052734375,\n",
       " 6010.5810546875,\n",
       " 6064.82958984375,\n",
       " 6051.84033203125,\n",
       " 6436.38427734375,\n",
       " 6755.7529296875,\n",
       " 6876.8720703125,\n",
       " 7582.2587890625,\n",
       " 8174.87060546875,\n",
       " 8300.8369140625,\n",
       " 8211.5400390625,\n",
       " 7730.49169921875,\n",
       " 7627.38232421875,\n",
       " 8053.310546875,\n",
       " 7938.9765625,\n",
       " 8116.81640625,\n",
       " 8004.6748046875,\n",
       " 8048.0732421875,\n",
       " 8205.2607421875,\n",
       " 8138.41064453125,\n",
       " 8519.767578125,\n",
       " 8687.45703125,\n",
       " 8503.3427734375,\n",
       " 8850.984375,\n",
       " 8754.5087890625,\n",
       " 8498.62109375,\n",
       " 8905.1181640625,\n",
       " 8863.5791015625,\n",
       " 8609.6240234375,\n",
       " 8033.93701171875,\n",
       " 7975.21044921875,\n",
       " 7942.1533203125,\n",
       " 8081.5615234375,\n",
       " 8073.57421875,\n",
       " 8041.81103515625,\n",
       " 7924.82861328125,\n",
       " 7986.87060546875,\n",
       " 8187.6611328125,\n",
       " 8263.65625,\n",
       " 8486.890625,\n",
       " 8641.4814453125,\n",
       " 8922.203125,\n",
       " 9472.83203125,\n",
       " 9493.0498046875,\n",
       " 9523.5166015625,\n",
       " 9686.810546875,\n",
       " 10223.41796875,\n",
       " 10635.2744140625,\n",
       " 10584.91796875,\n",
       " 11091.935546875,\n",
       " 11102.328125,\n",
       " 10847.3173828125,\n",
       " 10877.345703125,\n",
       " 11744.7578125,\n",
       " 11874.5322265625,\n",
       " 11612.71875,\n",
       " 10737.2255859375,\n",
       " 10406.6474609375,\n",
       " 11240.162109375,\n",
       " 11105.4267578125,\n",
       " 11491.849609375,\n",
       " 11833.08984375,\n",
       " 11634.5009765625,\n",
       " 11429.7109375,\n",
       " 11696.8125,\n",
       " 11740.373046875,\n",
       " 11639.490234375,\n",
       " 11818.431640625,\n",
       " 11746.4453125,\n",
       " 11275.646484375,\n",
       " 10474.5625,\n",
       " 10354.3828125,\n",
       " 9537.3798828125,\n",
       " 10078.724609375,\n",
       " 10509.099609375,\n",
       " 10677.7587890625,\n",
       " 10716.15625,\n",
       " 10758.548828125,\n",
       " 10527.5263671875,\n",
       " 10390.849609375,\n",
       " 9968.7265625,\n",
       " 9646.7177734375,\n",
       " 9936.572265625,\n",
       " 9778.28515625,\n",
       " 9877.8955078125,\n",
       " 9631.228515625,\n",
       " 9726.4296875,\n",
       " 9688.8984375,\n",
       " 9940.349609375,\n",
       " 10129.0107421875,\n",
       " 10538.939453125,\n",
       " 10939.39453125,\n",
       " 11162.033203125,\n",
       " 11665.84375,\n",
       " 11834.314453125,\n",
       " 11822.90625,\n",
       " 11563.560546875,\n",
       " 11367.001953125,\n",
       " 11341.234375,\n",
       " 10942.484375,\n",
       " 10567.5458984375,\n",
       " 10388.48828125,\n",
       " 10175.603515625,\n",
       " 10138.244140625,\n",
       " 10438.7265625,\n",
       " 10341.060546875,\n",
       " 10139.041015625,\n",
       " 10335.490234375,\n",
       " 10486.7890625,\n",
       " 10300.275390625,\n",
       " 10305.5244140625,\n",
       " 10208.197265625,\n",
       " 10032.177734375,\n",
       " 9876.955078125,\n",
       " 9984.36328125,\n",
       " 9856.73046875,\n",
       " 9993.5712890625,\n",
       " 9710.138671875,\n",
       " 9816.9140625,\n",
       " 10065.91796875,\n",
       " 10244.17578125,\n",
       " 10457.904296875,\n",
       " 10800.2216796875,\n",
       " 10955.2158203125,\n",
       " 10844.8095703125,\n",
       " 10549.994140625,\n",
       " 10210.701171875,\n",
       " 10382.009765625,\n",
       " 10313.869140625,\n",
       " 10540.0322265625,\n",
       " 10431.734375,\n",
       " 10501.6025390625,\n",
       " 10441.01171875,\n",
       " 10340.310546875,\n",
       " 10166.4306640625,\n",
       " 10068.2998046875,\n",
       " 10079.611328125,\n",
       " 10131.4306640625,\n",
       " 10062.3447265625,\n",
       " 10098.6162109375,\n",
       " 9861.681640625,\n",
       " 9644.5302734375,\n",
       " 8768.58984375,\n",
       " 8829.755859375,\n",
       " 8315.236328125,\n",
       " 8343.2490234375,\n",
       " 8082.513671875,\n",
       " 8115.67138671875,\n",
       " 8461.9365234375,\n",
       " 8406.111328125,\n",
       " 8365.814453125,\n",
       " 8191.6572265625,\n",
       " 8374.9970703125,\n",
       " 8358.8408203125,\n",
       " 8335.791015625,\n",
       " 8191.4501953125,\n",
       " 8314.0625,\n",
       " 8412.193359375,\n",
       " 8496.15234375,\n",
       " 8571.927734375,\n",
       " 8474.037109375,\n",
       " 8348.40625,\n",
       " 8285.8662109375,\n",
       " 8227.5380859375,\n",
       " 8218.4208984375,\n",
       " 7968.16650390625,\n",
       " 7931.5595703125,\n",
       " 7875.88671875,\n",
       " 7753.994140625,\n",
       " 7938.56494140625,\n",
       " 7969.70947265625,\n",
       " 7723.19970703125,\n",
       " 7668.06494140625,\n",
       " 7046.40283203125,\n",
       " 7671.4130859375,\n",
       " 9553.0400390625,\n",
       " 9408.6923828125,\n",
       " 9343.18359375,\n",
       " 9380.18359375,\n",
       " 9338.6103515625,\n",
       " 9306.916015625,\n",
       " 9268.15625,\n",
       " 9281.80078125,\n",
       " 9279.1640625,\n",
       " 9448.603515625,\n",
       " 9443.5546875,\n",
       " 9337.3212890625,\n",
       " 9181.2412109375,\n",
       " 9131.05078125,\n",
       " 8832.4375,\n",
       " 8786.134765625,\n",
       " 8703.77734375,\n",
       " 8614.294921875,\n",
       " 8561.3251953125,\n",
       " 8392.3525390625,\n",
       " 8363.166015625,\n",
       " 8185.93994140625,\n",
       " 8165.72509765625,\n",
       " 8091.4697265625,\n",
       " 7845.09228515625,\n",
       " 7774.529296875,\n",
       " 7319.26025390625,\n",
       " 7174.44580078125,\n",
       " 7070.42236328125,\n",
       " 7107.29248046875,\n",
       " 7270.53173828125,\n",
       " 7224.82177734375,\n",
       " 7409.5810546875,\n",
       " 7546.70166015625,\n",
       " 7588.861328125,\n",
       " 7588.33447265625,\n",
       " 7427.50341796875,\n",
       " 7351.65625,\n",
       " 7309.7197265625,\n",
       " 7317.57958984375,\n",
       " 7336.228515625,\n",
       " 7370.34423828125,\n",
       " 7405.740234375,\n",
       " 7405.68896484375,\n",
       " 7421.896484375,\n",
       " 7290.1796875,\n",
       " 7211.97998046875,\n",
       " 7226.19580078125,\n",
       " 7234.41650390625,\n",
       " 7148.443359375,\n",
       " 7137.82666015625,\n",
       " 7158.81494140625,\n",
       " 6882.658203125,\n",
       " 6959.017578125,\n",
       " 7283.34228515625,\n",
       " 7283.115234375,\n",
       " 7201.7802734375,\n",
       " 7305.3076171875,\n",
       " 7404.33935546875,\n",
       " 7150.25439453125,\n",
       " 7185.32421875,\n",
       " 7309.29443359375,\n",
       " 7293.0390625,\n",
       " 7343.5576171875,\n",
       " 7423.24560546875,\n",
       " 7453.07275390625,\n",
       " 7351.27392578125,\n",
       " 7346.79296875,\n",
       " 7145.89306640625,\n",
       " 7339.6123046875,\n",
       " 7428.53662109375,\n",
       " 7449.939453125,\n",
       " 7588.30859375,\n",
       " 8011.44921875,\n",
       " 8288.91796875,\n",
       " 8084.31298828125,\n",
       " 8022.419921875,\n",
       " 8335.8271484375,\n",
       " 8354.908203125,\n",
       " 8411.8427734375,\n",
       " 8846.693359375,\n",
       " 9129.232421875,\n",
       " 8866.2998046875,\n",
       " 8982.5439453125,\n",
       " 8704.751953125,\n",
       " 8849.1953125,\n",
       " 8628.85546875,\n",
       " 8434.7705078125,\n",
       " 8462.166015625,\n",
       " 8323.72265625,\n",
       " 8431.7333984375,\n",
       " 8471.4755859375,\n",
       " 8859.3232421875,\n",
       " 9246.966796875,\n",
       " 9527.40625,\n",
       " 9696.966796875,\n",
       " 9584.83203125,\n",
       " 9565.572265625,\n",
       " 9612.443359375,\n",
       " 9529.744140625,\n",
       " 9424.01953125,\n",
       " 9139.509765625,\n",
       " 9460.744140625,\n",
       " 9780.732421875,\n",
       " 9860.662109375,\n",
       " 9870.498046875,\n",
       " 10080.6201171875,\n",
       " 9965.1455078125,\n",
       " 9921.603515625,\n",
       " 10216.55859375,\n",
       " 10163.9404296875,\n",
       " 10209.4775390625,\n",
       " 10007.125,\n",
       " 9947.783203125,\n",
       " 9819.478515625,\n",
       " 9852.052734375,\n",
       " 10046.232421875,\n",
       " 9602.3681640625,\n",
       " 9753.7734375,\n",
       " 9574.263671875,\n",
       " 9595.900390625,\n",
       " 9406.64453125,\n",
       " 9191.9443359375,\n",
       " 8847.8291015625,\n",
       " 8729.4921875,\n",
       " 8743.5537109375,\n",
       " 8768.99609375,\n",
       " 8582.0595703125,\n",
       " 8800.001953125,\n",
       " 8969.3515625,\n",
       " 8884.720703125,\n",
       " 9165.55078125,\n",
       " 9063.33984375,\n",
       " 8955.9658203125,\n",
       " 8478.515625,\n",
       " 7852.54150390625,\n",
       " 7836.1865234375,\n",
       " 5993.7763671875,\n",
       " 5471.9052734375,\n",
       " 5444.3955078125,\n",
       " 5140.56640625,\n",
       " 5311.76171875,\n",
       " 5413.8359375,\n",
       " 5810.7939453125,\n",
       " 6301.1845703125,\n",
       " 6210.81591796875,\n",
       " 6191.7158203125,\n",
       " 6675.76171875,\n",
       " 6561.74853515625,\n",
       " 6916.48876953125,\n",
       " 6902.91357421875,\n",
       " 6799.56982421875,\n",
       " 6992.8828125,\n",
       " 7613.03369140625,\n",
       " 7447.5302734375,\n",
       " 7247.478515625,\n",
       " 7156.2080078125,\n",
       " 7101.48046875,\n",
       " 7008.701171875,\n",
       " 7056.1455078125,\n",
       " 6975.36767578125,\n",
       " 7073.697265625,\n",
       " 6980.5595703125,\n",
       " 7126.31396484375,\n",
       " 7252.33544921875,\n",
       " 7192.8505859375,\n",
       " 7206.6181640625,\n",
       " 7273.04150390625,\n",
       " 7339.1943359375,\n",
       " 7268.02734375,\n",
       " 7374.91259765625,\n",
       " 7346.033203125,\n",
       " 7340.22802734375,\n",
       " 7399.70458984375,\n",
       " 7452.33447265625,\n",
       " 7152.115234375,\n",
       " 7841.29296875,\n",
       " 9308.86328125,\n",
       " 9056.4599609375,\n",
       " 8505.015625,\n",
       " 8623.166015625,\n",
       " 8880.3544921875,\n",
       " 8791.9853515625,\n",
       " 8559.361328125,\n",
       " 9479.9970703125,\n",
       " 9917.095703125,\n",
       " 9195.9736328125,\n",
       " 8970.5546875,\n",
       " 9730.802734375,\n",
       " 9272.62890625,\n",
       " 9359.611328125,\n",
       " 9732.3056640625,\n",
       " 9488.333984375,\n",
       " 9081.552734375,\n",
       " 9199.939453125,\n",
       " 9206.8125,\n",
       " 9095.720703125,\n",
       " 9298.384765625,\n",
       " 9294.0166015625,\n",
       " 9074.2158203125,\n",
       " 9075.6337890625,\n",
       " 9083.7021484375,\n",
       " 8579.3896484375,\n",
       " 8606.45703125,\n",
       " 8719.2578125,\n",
       " 9381.3603515625,\n",
       " 9608.8505859375,\n",
       " 9666.451171875,\n",
       " 9371.0078125,\n",
       " 9438.1533203125,\n",
       " 10097.939453125,\n",
       " 9772.21484375,\n",
       " 9910.9609375,\n",
       " 9800.751953125,\n",
       " 9620.3603515625,\n",
       " 9566.533203125,\n",
       " 9558.0126953125,\n",
       " 9409.6650390625,\n",
       " 9658.724609375,\n",
       " 9745.7666015625,\n",
       " 9563.0859375,\n",
       " 9513.435546875,\n",
       " 9262.484375,\n",
       " 9114.521484375,\n",
       " 9341.6259765625,\n",
       " 9284.859375,\n",
       " 9207.748046875,\n",
       " 9212.2216796875,\n",
       " 9136.142578125,\n",
       " 8989.75390625,\n",
       " 9286.9443359375,\n",
       " 9319.515625,\n",
       " 9434.3203125,\n",
       " 9294.8447265625,\n",
       " 9068.0078125,\n",
       " 9100.06640625,\n",
       " 9102.484375,\n",
       " 8983.9599609375,\n",
       " 8879.388671875,\n",
       " 8954.0517578125,\n",
       " 8870.013671875,\n",
       " 8907.6611328125,\n",
       " 8746.6650390625,\n",
       " 8725.720703125,\n",
       " 9032.4375,\n",
       " 9189.880859375,\n",
       " 9280.708984375,\n",
       " 9138.0234375,\n",
       " 9111.5771484375,\n",
       " 9144.462890625,\n",
       " 9101.12890625,\n",
       " 9002.6416015625,\n",
       " 9059.6484375,\n",
       " 9188.697265625,\n",
       " 9155.3583984375,\n",
       " 9051.1005859375,\n",
       " 8966.087890625,\n",
       " 8956.24609375,\n",
       " 9035.88671875,\n",
       " 9335.6484375,\n",
       " 9448.98046875,\n",
       " 9935.33984375,\n",
       " 10040.494140625,\n",
       " 9598.2587890625,\n",
       " 9636.998046875,\n",
       " 10557.5947265625,\n",
       " 10980.2470703125,\n",
       " 10983.25,\n",
       " 10655.7939453125,\n",
       " 10787.1435546875,\n",
       " 11030.302734375,\n",
       " 10770.64453125,\n",
       " 10588.056640625,\n",
       " 10446.3662109375,\n",
       " 10497.2890625,\n",
       " 10585.5498046875,\n",
       " 10673.072265625,\n",
       " 10751.08203125,\n",
       " 10755.921875,\n",
       " 10892.25,\n",
       " 10608.21484375,\n",
       " 10586.615234375,\n",
       " 10639.5185546875,\n",
       " 10558.91796875,\n",
       " 10502.7177734375,\n",
       " 10330.462890625,\n",
       " 10551.166015625,\n",
       " 10690.4453125,\n",
       " 10715.892578125,\n",
       " 10753.6142578125,\n",
       " 10680.111328125,\n",
       " 10242.4248046875,\n",
       " 10328.1826171875,\n",
       " 10350.8125,\n",
       " 10562.607421875,\n",
       " 10941.0283203125,\n",
       " 11244.818359375,\n",
       " 11205.931640625,\n",
       " 11012.75,\n",
       " 10962.0048828125,\n",
       " 10902.7900390625,\n",
       " 10989.107421875,\n",
       " 10818.67578125,\n",
       " 10546.6767578125,\n",
       " 10101.33203125,\n",
       " 9893.6787109375,\n",
       " 9739.509765625,\n",
       " 9576.244140625,\n",
       " 9744.8017578125,\n",
       " 10012.650390625,\n",
       " 10408.1474609375,\n",
       " 10367.234375,\n",
       " 10365.97265625]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list1 =y_pred_train.ravel().tolist()\n",
    "list1\n",
    "list2 =y_pred_test.ravel().tolist()\n",
    "list2\n",
    "list3= list1 +list2 \n",
    "list3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "862"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(list3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from datetime import datetime\n",
    "#a_date = datetime.date(2015, 10, 10)\n",
    "#days = datetime.delta(days=5)\n",
    "\n",
    "#new_date = a_date - days\n",
    "#print(new_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_predictions = pd.DataFrame({'date':pd.date_range(end='14-09-2020',periods=862),'y_pred':list3})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>y_pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-05-07</td>\n",
       "      <td>9386.013672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-05-08</td>\n",
       "      <td>9287.477539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-05-09</td>\n",
       "      <td>9374.355469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-05-10</td>\n",
       "      <td>9248.493164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-11</td>\n",
       "      <td>9167.071289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>857</th>\n",
       "      <td>2020-09-10</td>\n",
       "      <td>9744.801758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>858</th>\n",
       "      <td>2020-09-11</td>\n",
       "      <td>10012.650391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>859</th>\n",
       "      <td>2020-09-12</td>\n",
       "      <td>10408.147461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>860</th>\n",
       "      <td>2020-09-13</td>\n",
       "      <td>10367.234375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>861</th>\n",
       "      <td>2020-09-14</td>\n",
       "      <td>10365.972656</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>862 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          date        y_pred\n",
       "0   2018-05-07   9386.013672\n",
       "1   2018-05-08   9287.477539\n",
       "2   2018-05-09   9374.355469\n",
       "3   2018-05-10   9248.493164\n",
       "4   2018-05-11   9167.071289\n",
       "..         ...           ...\n",
       "857 2020-09-10   9744.801758\n",
       "858 2020-09-11  10012.650391\n",
       "859 2020-09-12  10408.147461\n",
       "860 2020-09-13  10367.234375\n",
       "861 2020-09-14  10365.972656\n",
       "\n",
       "[862 rows x 2 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_predictions.to_csv(\"results_LSTM.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>y_pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-05-07</td>\n",
       "      <td>9386.013672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-05-08</td>\n",
       "      <td>9287.477539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-05-09</td>\n",
       "      <td>9374.355469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-05-10</td>\n",
       "      <td>9248.493164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-11</td>\n",
       "      <td>9167.071289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>857</th>\n",
       "      <td>2020-09-10</td>\n",
       "      <td>9744.801758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>858</th>\n",
       "      <td>2020-09-11</td>\n",
       "      <td>10012.650391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>859</th>\n",
       "      <td>2020-09-12</td>\n",
       "      <td>10408.147461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>860</th>\n",
       "      <td>2020-09-13</td>\n",
       "      <td>10367.234375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>861</th>\n",
       "      <td>2020-09-14</td>\n",
       "      <td>10365.972656</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>862 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          date        y_pred\n",
       "0   2018-05-07   9386.013672\n",
       "1   2018-05-08   9287.477539\n",
       "2   2018-05-09   9374.355469\n",
       "3   2018-05-10   9248.493164\n",
       "4   2018-05-11   9167.071289\n",
       "..         ...           ...\n",
       "857 2020-09-10   9744.801758\n",
       "858 2020-09-11  10012.650391\n",
       "859 2020-09-12  10408.147461\n",
       "860 2020-09-13  10367.234375\n",
       "861 2020-09-14  10365.972656\n",
       "\n",
       "[862 rows x 2 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_predictions.Returns_predicted=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(1, len(results_predictions)):\n",
    "    results_predictions.loc[i,\"Returns_predicted\"] = (results_predictions.loc[i,\"y_pred\"]- results_predictions.loc[i-1,\"y_pred\"])/(results_predictions.loc[i-1,\"y_pred\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_predictions=results_predictions.rename(columns={\"date\": \"Date\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>y_pred</th>\n",
       "      <th>Returns_predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-05-07</td>\n",
       "      <td>9386.013672</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-05-08</td>\n",
       "      <td>9287.477539</td>\n",
       "      <td>-0.010498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-05-09</td>\n",
       "      <td>9374.355469</td>\n",
       "      <td>0.009354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-05-10</td>\n",
       "      <td>9248.493164</td>\n",
       "      <td>-0.013426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-11</td>\n",
       "      <td>9167.071289</td>\n",
       "      <td>-0.008804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>857</th>\n",
       "      <td>2020-09-10</td>\n",
       "      <td>9744.801758</td>\n",
       "      <td>0.017602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>858</th>\n",
       "      <td>2020-09-11</td>\n",
       "      <td>10012.650391</td>\n",
       "      <td>0.027486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>859</th>\n",
       "      <td>2020-09-12</td>\n",
       "      <td>10408.147461</td>\n",
       "      <td>0.039500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>860</th>\n",
       "      <td>2020-09-13</td>\n",
       "      <td>10367.234375</td>\n",
       "      <td>-0.003931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>861</th>\n",
       "      <td>2020-09-14</td>\n",
       "      <td>10365.972656</td>\n",
       "      <td>-0.000122</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>862 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date        y_pred  Returns_predicted\n",
       "0   2018-05-07   9386.013672                NaN\n",
       "1   2018-05-08   9287.477539          -0.010498\n",
       "2   2018-05-09   9374.355469           0.009354\n",
       "3   2018-05-10   9248.493164          -0.013426\n",
       "4   2018-05-11   9167.071289          -0.008804\n",
       "..         ...           ...                ...\n",
       "857 2020-09-10   9744.801758           0.017602\n",
       "858 2020-09-11  10012.650391           0.027486\n",
       "859 2020-09-12  10408.147461           0.039500\n",
       "860 2020-09-13  10367.234375          -0.003931\n",
       "861 2020-09-14  10365.972656          -0.000122\n",
       "\n",
       "[862 rows x 3 columns]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Returns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframe[\"Returns\"]=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframe=dataframe.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(1, len(dataframe)):\n",
    "    dataframe.loc[i,\"Returns\"] = (dataframe.loc[i,\"Close\"]- dataframe.loc[i-1,\"Close\"])/(dataframe.loc[i-1,\"Close\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume_(BTC)</th>\n",
       "      <th>Polarity</th>\n",
       "      <th>tweet_volum</th>\n",
       "      <th>close_delay</th>\n",
       "      <th>Returns</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2018-04-16</td>\n",
       "      <td>8080.020306</td>\n",
       "      <td>7.546252</td>\n",
       "      <td>0.108300</td>\n",
       "      <td>63.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2018-04-17</td>\n",
       "      <td>8036.633618</td>\n",
       "      <td>6.442466</td>\n",
       "      <td>0.144570</td>\n",
       "      <td>129.0</td>\n",
       "      <td>8080.020306</td>\n",
       "      <td>-0.005370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2018-04-18</td>\n",
       "      <td>8057.312993</td>\n",
       "      <td>6.407781</td>\n",
       "      <td>0.079355</td>\n",
       "      <td>88.0</td>\n",
       "      <td>8036.633618</td>\n",
       "      <td>0.002573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2018-04-19</td>\n",
       "      <td>8213.263314</td>\n",
       "      <td>6.560626</td>\n",
       "      <td>0.107818</td>\n",
       "      <td>94.0</td>\n",
       "      <td>8057.312993</td>\n",
       "      <td>0.019355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2018-04-20</td>\n",
       "      <td>8445.635604</td>\n",
       "      <td>11.152516</td>\n",
       "      <td>0.103734</td>\n",
       "      <td>75.0</td>\n",
       "      <td>8213.263314</td>\n",
       "      <td>0.028292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>878</td>\n",
       "      <td>2020-09-10</td>\n",
       "      <td>10338.715299</td>\n",
       "      <td>7.131391</td>\n",
       "      <td>0.147109</td>\n",
       "      <td>68.0</td>\n",
       "      <td>10187.324936</td>\n",
       "      <td>0.014861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>879</td>\n",
       "      <td>2020-09-11</td>\n",
       "      <td>10302.365012</td>\n",
       "      <td>3.658533</td>\n",
       "      <td>0.172471</td>\n",
       "      <td>106.0</td>\n",
       "      <td>10338.715299</td>\n",
       "      <td>-0.003516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>880</td>\n",
       "      <td>2020-09-12</td>\n",
       "      <td>10372.443402</td>\n",
       "      <td>1.752966</td>\n",
       "      <td>0.099601</td>\n",
       "      <td>90.0</td>\n",
       "      <td>10302.365012</td>\n",
       "      <td>0.006802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>881</th>\n",
       "      <td>881</td>\n",
       "      <td>2020-09-13</td>\n",
       "      <td>10395.134226</td>\n",
       "      <td>3.022224</td>\n",
       "      <td>0.106865</td>\n",
       "      <td>90.0</td>\n",
       "      <td>10372.443402</td>\n",
       "      <td>0.002188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>882</td>\n",
       "      <td>2020-09-14</td>\n",
       "      <td>10332.370000</td>\n",
       "      <td>1.292006</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10395.134226</td>\n",
       "      <td>-0.006038</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>883 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index  Timestamp         Close  Volume_(BTC)  Polarity  tweet_volum  \\\n",
       "0        0 2018-04-16   8080.020306      7.546252  0.108300         63.0   \n",
       "1        1 2018-04-17   8036.633618      6.442466  0.144570        129.0   \n",
       "2        2 2018-04-18   8057.312993      6.407781  0.079355         88.0   \n",
       "3        3 2018-04-19   8213.263314      6.560626  0.107818         94.0   \n",
       "4        4 2018-04-20   8445.635604     11.152516  0.103734         75.0   \n",
       "..     ...        ...           ...           ...       ...          ...   \n",
       "878    878 2020-09-10  10338.715299      7.131391  0.147109         68.0   \n",
       "879    879 2020-09-11  10302.365012      3.658533  0.172471        106.0   \n",
       "880    880 2020-09-12  10372.443402      1.752966  0.099601         90.0   \n",
       "881    881 2020-09-13  10395.134226      3.022224  0.106865         90.0   \n",
       "882    882 2020-09-14  10332.370000      1.292006  0.000000          1.0   \n",
       "\n",
       "      close_delay   Returns  \n",
       "0             NaN  0.000000  \n",
       "1     8080.020306 -0.005370  \n",
       "2     8036.633618  0.002573  \n",
       "3     8057.312993  0.019355  \n",
       "4     8213.263314  0.028292  \n",
       "..            ...       ...  \n",
       "878  10187.324936  0.014861  \n",
       "879  10338.715299 -0.003516  \n",
       "880  10302.365012  0.006802  \n",
       "881  10372.443402  0.002188  \n",
       "882  10395.134226 -0.006038  \n",
       "\n",
       "[883 rows x 8 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume_(BTC)</th>\n",
       "      <th>Polarity</th>\n",
       "      <th>tweet_volum</th>\n",
       "      <th>close_delay</th>\n",
       "      <th>Returns</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>2018-05-07</td>\n",
       "      <td>9344.100528</td>\n",
       "      <td>9.455798</td>\n",
       "      <td>0.058182</td>\n",
       "      <td>46.0</td>\n",
       "      <td>9615.729847</td>\n",
       "      <td>-0.028248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>2018-05-08</td>\n",
       "      <td>9260.790924</td>\n",
       "      <td>7.929382</td>\n",
       "      <td>0.048036</td>\n",
       "      <td>99.0</td>\n",
       "      <td>9344.100528</td>\n",
       "      <td>-0.008916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>2018-05-09</td>\n",
       "      <td>9193.338448</td>\n",
       "      <td>7.899761</td>\n",
       "      <td>0.193786</td>\n",
       "      <td>54.0</td>\n",
       "      <td>9260.790924</td>\n",
       "      <td>-0.007284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>2018-05-10</td>\n",
       "      <td>9265.530205</td>\n",
       "      <td>8.173029</td>\n",
       "      <td>0.109116</td>\n",
       "      <td>46.0</td>\n",
       "      <td>9193.338448</td>\n",
       "      <td>0.007853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>2018-05-11</td>\n",
       "      <td>8701.556431</td>\n",
       "      <td>14.155505</td>\n",
       "      <td>0.075735</td>\n",
       "      <td>78.0</td>\n",
       "      <td>9265.530205</td>\n",
       "      <td>-0.060868</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index  Timestamp        Close  Volume_(BTC)  Polarity  tweet_volum  \\\n",
       "21     21 2018-05-07  9344.100528      9.455798  0.058182         46.0   \n",
       "22     22 2018-05-08  9260.790924      7.929382  0.048036         99.0   \n",
       "23     23 2018-05-09  9193.338448      7.899761  0.193786         54.0   \n",
       "24     24 2018-05-10  9265.530205      8.173029  0.109116         46.0   \n",
       "25     25 2018-05-11  8701.556431     14.155505  0.075735         78.0   \n",
       "\n",
       "    close_delay   Returns  \n",
       "21  9615.729847 -0.028248  \n",
       "22  9344.100528 -0.008916  \n",
       "23  9260.790924 -0.007284  \n",
       "24  9193.338448  0.007853  \n",
       "25  9265.530205 -0.060868  "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "start_date = '2018-05-07'\n",
    "end_date = '2020-09-14'\n",
    "mask = (dataframe['Timestamp'] >= start_date) & (dataframe['Timestamp'] <= end_date)\n",
    "df1 = dataframe.loc[mask]\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume_(BTC)</th>\n",
       "      <th>Polarity</th>\n",
       "      <th>tweet_volum</th>\n",
       "      <th>close_delay</th>\n",
       "      <th>Returns</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>2018-05-07</td>\n",
       "      <td>9344.100528</td>\n",
       "      <td>9.455798</td>\n",
       "      <td>0.058182</td>\n",
       "      <td>46.0</td>\n",
       "      <td>9615.729847</td>\n",
       "      <td>-0.028248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>2018-05-08</td>\n",
       "      <td>9260.790924</td>\n",
       "      <td>7.929382</td>\n",
       "      <td>0.048036</td>\n",
       "      <td>99.0</td>\n",
       "      <td>9344.100528</td>\n",
       "      <td>-0.008916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>2018-05-09</td>\n",
       "      <td>9193.338448</td>\n",
       "      <td>7.899761</td>\n",
       "      <td>0.193786</td>\n",
       "      <td>54.0</td>\n",
       "      <td>9260.790924</td>\n",
       "      <td>-0.007284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>2018-05-10</td>\n",
       "      <td>9265.530205</td>\n",
       "      <td>8.173029</td>\n",
       "      <td>0.109116</td>\n",
       "      <td>46.0</td>\n",
       "      <td>9193.338448</td>\n",
       "      <td>0.007853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>2018-05-11</td>\n",
       "      <td>8701.556431</td>\n",
       "      <td>14.155505</td>\n",
       "      <td>0.075735</td>\n",
       "      <td>78.0</td>\n",
       "      <td>9265.530205</td>\n",
       "      <td>-0.060868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>878</td>\n",
       "      <td>2020-09-10</td>\n",
       "      <td>10338.715299</td>\n",
       "      <td>7.131391</td>\n",
       "      <td>0.147109</td>\n",
       "      <td>68.0</td>\n",
       "      <td>10187.324936</td>\n",
       "      <td>0.014861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>879</td>\n",
       "      <td>2020-09-11</td>\n",
       "      <td>10302.365012</td>\n",
       "      <td>3.658533</td>\n",
       "      <td>0.172471</td>\n",
       "      <td>106.0</td>\n",
       "      <td>10338.715299</td>\n",
       "      <td>-0.003516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>880</td>\n",
       "      <td>2020-09-12</td>\n",
       "      <td>10372.443402</td>\n",
       "      <td>1.752966</td>\n",
       "      <td>0.099601</td>\n",
       "      <td>90.0</td>\n",
       "      <td>10302.365012</td>\n",
       "      <td>0.006802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>881</th>\n",
       "      <td>881</td>\n",
       "      <td>2020-09-13</td>\n",
       "      <td>10395.134226</td>\n",
       "      <td>3.022224</td>\n",
       "      <td>0.106865</td>\n",
       "      <td>90.0</td>\n",
       "      <td>10372.443402</td>\n",
       "      <td>0.002188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>882</td>\n",
       "      <td>2020-09-14</td>\n",
       "      <td>10332.370000</td>\n",
       "      <td>1.292006</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10395.134226</td>\n",
       "      <td>-0.006038</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>862 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index  Timestamp         Close  Volume_(BTC)  Polarity  tweet_volum  \\\n",
       "21      21 2018-05-07   9344.100528      9.455798  0.058182         46.0   \n",
       "22      22 2018-05-08   9260.790924      7.929382  0.048036         99.0   \n",
       "23      23 2018-05-09   9193.338448      7.899761  0.193786         54.0   \n",
       "24      24 2018-05-10   9265.530205      8.173029  0.109116         46.0   \n",
       "25      25 2018-05-11   8701.556431     14.155505  0.075735         78.0   \n",
       "..     ...        ...           ...           ...       ...          ...   \n",
       "878    878 2020-09-10  10338.715299      7.131391  0.147109         68.0   \n",
       "879    879 2020-09-11  10302.365012      3.658533  0.172471        106.0   \n",
       "880    880 2020-09-12  10372.443402      1.752966  0.099601         90.0   \n",
       "881    881 2020-09-13  10395.134226      3.022224  0.106865         90.0   \n",
       "882    882 2020-09-14  10332.370000      1.292006  0.000000          1.0   \n",
       "\n",
       "      close_delay   Returns  \n",
       "21    9615.729847 -0.028248  \n",
       "22    9344.100528 -0.008916  \n",
       "23    9260.790924 -0.007284  \n",
       "24    9193.338448  0.007853  \n",
       "25    9265.530205 -0.060868  \n",
       "..            ...       ...  \n",
       "878  10187.324936  0.014861  \n",
       "879  10338.715299 -0.003516  \n",
       "880  10302.365012  0.006802  \n",
       "881  10372.443402  0.002188  \n",
       "882  10395.134226 -0.006038  \n",
       "\n",
       "[862 rows x 8 columns]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=df1.rename(columns={\"Timestamp\": \"Date\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['index', 'Date', 'Close', 'Volume_(BTC)', 'Polarity', 'tweet_volum',\n",
       "       'close_delay', 'Returns'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=df1.drop(columns=[\"index\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=df1.merge(results_predictions, on=\"Date\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Date', 'Close', 'Volume_(BTC)', 'Polarity', 'tweet_volum',\n",
       "       'close_delay', 'Returns', 'y_pred', 'Returns_predicted'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=df2.drop(columns=['Volume_(BTC)', 'Polarity', 'tweet_volum',\n",
    "       'close_delay'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fe0b53e59d0>"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_axes([0,0,1,1])\n",
    "ax.plot(df2.Date,df2.Returns, label= 'real returns', color='r')\n",
    "ax.plot(df2.Date,df2.Returns_predicted, label= 'predicted returns', color='b')\n",
    "ax.legend(loc=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## predictions: 07-05-2018 to 14-09-2020"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## train dataset: predictions 07-05-2018 to 22.03.2020\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Close</th>\n",
       "      <th>Returns</th>\n",
       "      <th>y_pred</th>\n",
       "      <th>Returns_predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-05-07</td>\n",
       "      <td>9344.100528</td>\n",
       "      <td>-0.028248</td>\n",
       "      <td>9386.013672</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-05-08</td>\n",
       "      <td>9260.790924</td>\n",
       "      <td>-0.008916</td>\n",
       "      <td>9287.477539</td>\n",
       "      <td>-0.010498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-05-09</td>\n",
       "      <td>9193.338448</td>\n",
       "      <td>-0.007284</td>\n",
       "      <td>9374.355469</td>\n",
       "      <td>0.009354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-05-10</td>\n",
       "      <td>9265.530205</td>\n",
       "      <td>0.007853</td>\n",
       "      <td>9248.493164</td>\n",
       "      <td>-0.013426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-11</td>\n",
       "      <td>8701.556431</td>\n",
       "      <td>-0.060868</td>\n",
       "      <td>9167.071289</td>\n",
       "      <td>-0.008804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>857</th>\n",
       "      <td>2020-09-10</td>\n",
       "      <td>10338.715299</td>\n",
       "      <td>0.014861</td>\n",
       "      <td>9744.801758</td>\n",
       "      <td>0.017602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>858</th>\n",
       "      <td>2020-09-11</td>\n",
       "      <td>10302.365012</td>\n",
       "      <td>-0.003516</td>\n",
       "      <td>10012.650391</td>\n",
       "      <td>0.027486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>859</th>\n",
       "      <td>2020-09-12</td>\n",
       "      <td>10372.443402</td>\n",
       "      <td>0.006802</td>\n",
       "      <td>10408.147461</td>\n",
       "      <td>0.039500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>860</th>\n",
       "      <td>2020-09-13</td>\n",
       "      <td>10395.134226</td>\n",
       "      <td>0.002188</td>\n",
       "      <td>10367.234375</td>\n",
       "      <td>-0.003931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>861</th>\n",
       "      <td>2020-09-14</td>\n",
       "      <td>10332.370000</td>\n",
       "      <td>-0.006038</td>\n",
       "      <td>10365.972656</td>\n",
       "      <td>-0.000122</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>862 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date         Close   Returns        y_pred  Returns_predicted\n",
       "0   2018-05-07   9344.100528 -0.028248   9386.013672                NaN\n",
       "1   2018-05-08   9260.790924 -0.008916   9287.477539          -0.010498\n",
       "2   2018-05-09   9193.338448 -0.007284   9374.355469           0.009354\n",
       "3   2018-05-10   9265.530205  0.007853   9248.493164          -0.013426\n",
       "4   2018-05-11   8701.556431 -0.060868   9167.071289          -0.008804\n",
       "..         ...           ...       ...           ...                ...\n",
       "857 2020-09-10  10338.715299  0.014861   9744.801758           0.017602\n",
       "858 2020-09-11  10302.365012 -0.003516  10012.650391           0.027486\n",
       "859 2020-09-12  10372.443402  0.006802  10408.147461           0.039500\n",
       "860 2020-09-13  10395.134226  0.002188  10367.234375          -0.003931\n",
       "861 2020-09-14  10332.370000 -0.006038  10365.972656          -0.000122\n",
       "\n",
       "[862 rows x 5 columns]"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2[\"error\"]=0\n",
    "df2[\"error\"] = df2.Returns_predicted - df2.Returns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Close</th>\n",
       "      <th>Returns</th>\n",
       "      <th>y_pred</th>\n",
       "      <th>Returns_predicted</th>\n",
       "      <th>error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-05-07</td>\n",
       "      <td>9344.100528</td>\n",
       "      <td>-0.028248</td>\n",
       "      <td>9386.013672</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-05-08</td>\n",
       "      <td>9260.790924</td>\n",
       "      <td>-0.008916</td>\n",
       "      <td>9287.477539</td>\n",
       "      <td>-0.010498</td>\n",
       "      <td>-0.001582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-05-09</td>\n",
       "      <td>9193.338448</td>\n",
       "      <td>-0.007284</td>\n",
       "      <td>9374.355469</td>\n",
       "      <td>0.009354</td>\n",
       "      <td>0.016638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-05-10</td>\n",
       "      <td>9265.530205</td>\n",
       "      <td>0.007853</td>\n",
       "      <td>9248.493164</td>\n",
       "      <td>-0.013426</td>\n",
       "      <td>-0.021279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-11</td>\n",
       "      <td>8701.556431</td>\n",
       "      <td>-0.060868</td>\n",
       "      <td>9167.071289</td>\n",
       "      <td>-0.008804</td>\n",
       "      <td>0.052064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>857</th>\n",
       "      <td>2020-09-10</td>\n",
       "      <td>10338.715299</td>\n",
       "      <td>0.014861</td>\n",
       "      <td>9744.801758</td>\n",
       "      <td>0.017602</td>\n",
       "      <td>0.002741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>858</th>\n",
       "      <td>2020-09-11</td>\n",
       "      <td>10302.365012</td>\n",
       "      <td>-0.003516</td>\n",
       "      <td>10012.650391</td>\n",
       "      <td>0.027486</td>\n",
       "      <td>0.031002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>859</th>\n",
       "      <td>2020-09-12</td>\n",
       "      <td>10372.443402</td>\n",
       "      <td>0.006802</td>\n",
       "      <td>10408.147461</td>\n",
       "      <td>0.039500</td>\n",
       "      <td>0.032698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>860</th>\n",
       "      <td>2020-09-13</td>\n",
       "      <td>10395.134226</td>\n",
       "      <td>0.002188</td>\n",
       "      <td>10367.234375</td>\n",
       "      <td>-0.003931</td>\n",
       "      <td>-0.006118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>861</th>\n",
       "      <td>2020-09-14</td>\n",
       "      <td>10332.370000</td>\n",
       "      <td>-0.006038</td>\n",
       "      <td>10365.972656</td>\n",
       "      <td>-0.000122</td>\n",
       "      <td>0.005916</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>862 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date         Close   Returns        y_pred  Returns_predicted  \\\n",
       "0   2018-05-07   9344.100528 -0.028248   9386.013672                NaN   \n",
       "1   2018-05-08   9260.790924 -0.008916   9287.477539          -0.010498   \n",
       "2   2018-05-09   9193.338448 -0.007284   9374.355469           0.009354   \n",
       "3   2018-05-10   9265.530205  0.007853   9248.493164          -0.013426   \n",
       "4   2018-05-11   8701.556431 -0.060868   9167.071289          -0.008804   \n",
       "..         ...           ...       ...           ...                ...   \n",
       "857 2020-09-10  10338.715299  0.014861   9744.801758           0.017602   \n",
       "858 2020-09-11  10302.365012 -0.003516  10012.650391           0.027486   \n",
       "859 2020-09-12  10372.443402  0.006802  10408.147461           0.039500   \n",
       "860 2020-09-13  10395.134226  0.002188  10367.234375          -0.003931   \n",
       "861 2020-09-14  10332.370000 -0.006038  10365.972656          -0.000122   \n",
       "\n",
       "        error  \n",
       "0         NaN  \n",
       "1   -0.001582  \n",
       "2    0.016638  \n",
       "3   -0.021279  \n",
       "4    0.052064  \n",
       "..        ...  \n",
       "857  0.002741  \n",
       "858  0.031002  \n",
       "859  0.032698  \n",
       "860 -0.006118  \n",
       "861  0.005916  \n",
       "\n",
       "[862 rows x 6 columns]"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Close</th>\n",
       "      <th>Returns</th>\n",
       "      <th>y_pred</th>\n",
       "      <th>Returns_predicted</th>\n",
       "      <th>error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-05-07</td>\n",
       "      <td>9344.100528</td>\n",
       "      <td>-0.028248</td>\n",
       "      <td>9386.013672</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-05-08</td>\n",
       "      <td>9260.790924</td>\n",
       "      <td>-0.008916</td>\n",
       "      <td>9287.477539</td>\n",
       "      <td>-0.010498</td>\n",
       "      <td>-0.001582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-05-09</td>\n",
       "      <td>9193.338448</td>\n",
       "      <td>-0.007284</td>\n",
       "      <td>9374.355469</td>\n",
       "      <td>0.009354</td>\n",
       "      <td>0.016638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-05-10</td>\n",
       "      <td>9265.530205</td>\n",
       "      <td>0.007853</td>\n",
       "      <td>9248.493164</td>\n",
       "      <td>-0.013426</td>\n",
       "      <td>-0.021279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-11</td>\n",
       "      <td>8701.556431</td>\n",
       "      <td>-0.060868</td>\n",
       "      <td>9167.071289</td>\n",
       "      <td>-0.008804</td>\n",
       "      <td>0.052064</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date        Close   Returns       y_pred  Returns_predicted     error\n",
       "0 2018-05-07  9344.100528 -0.028248  9386.013672                NaN       NaN\n",
       "1 2018-05-08  9260.790924 -0.008916  9287.477539          -0.010498 -0.001582\n",
       "2 2018-05-09  9193.338448 -0.007284  9374.355469           0.009354  0.016638\n",
       "3 2018-05-10  9265.530205  0.007853  9248.493164          -0.013426 -0.021279\n",
       "4 2018-05-11  8701.556431 -0.060868  9167.071289          -0.008804  0.052064"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "start_date = '2018-05-07'\n",
    "end_date = '2020-03-22'\n",
    "mask = (df2['Date'] >= start_date) & (df2['Date'] <= end_date)\n",
    "df3 = df2.loc[mask]\n",
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fe0b6b65dc0>"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_axes([0,0,1,1])\n",
    "ax.plot(df3.Date,df3.Returns, label= 'real returns on the train set', color='r')\n",
    "ax.plot(df3.Date,df3.Returns_predicted, label= 'predicted returns on the train set', color='b')\n",
    "ax.legend(loc=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fe0b7df2490>"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_axes([0,0,1,1])\n",
    "ax.plot(df3.Date,df3.error, label= 'error= predicted returns - real returns train set', color='g')\n",
    "#ax.plot(df3.Date,df3.Returns_predicted, label= 'predicted returns on the train set', color='b')\n",
    "ax.legend(loc=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test dataset; predictions 23.03.2020 to 14.09.2020"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Close</th>\n",
       "      <th>Returns</th>\n",
       "      <th>y_pred</th>\n",
       "      <th>Returns_predicted</th>\n",
       "      <th>error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>686</th>\n",
       "      <td>2020-03-23</td>\n",
       "      <td>6105.527945</td>\n",
       "      <td>-0.005517</td>\n",
       "      <td>5993.776367</td>\n",
       "      <td>-0.235116</td>\n",
       "      <td>-0.229599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>687</th>\n",
       "      <td>2020-03-24</td>\n",
       "      <td>6653.005783</td>\n",
       "      <td>0.089669</td>\n",
       "      <td>5471.905273</td>\n",
       "      <td>-0.087069</td>\n",
       "      <td>-0.176738</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>688</th>\n",
       "      <td>2020-03-25</td>\n",
       "      <td>6661.981810</td>\n",
       "      <td>0.001349</td>\n",
       "      <td>5444.395508</td>\n",
       "      <td>-0.005027</td>\n",
       "      <td>-0.006377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>689</th>\n",
       "      <td>2020-03-26</td>\n",
       "      <td>6671.903662</td>\n",
       "      <td>0.001489</td>\n",
       "      <td>5140.566406</td>\n",
       "      <td>-0.055806</td>\n",
       "      <td>-0.057295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>690</th>\n",
       "      <td>2020-03-27</td>\n",
       "      <td>6691.695215</td>\n",
       "      <td>0.002966</td>\n",
       "      <td>5311.761719</td>\n",
       "      <td>0.033303</td>\n",
       "      <td>0.030336</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date        Close   Returns       y_pred  Returns_predicted  \\\n",
       "686 2020-03-23  6105.527945 -0.005517  5993.776367          -0.235116   \n",
       "687 2020-03-24  6653.005783  0.089669  5471.905273          -0.087069   \n",
       "688 2020-03-25  6661.981810  0.001349  5444.395508          -0.005027   \n",
       "689 2020-03-26  6671.903662  0.001489  5140.566406          -0.055806   \n",
       "690 2020-03-27  6691.695215  0.002966  5311.761719           0.033303   \n",
       "\n",
       "        error  \n",
       "686 -0.229599  \n",
       "687 -0.176738  \n",
       "688 -0.006377  \n",
       "689 -0.057295  \n",
       "690  0.030336  "
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "start_date = '2020-03-23'\n",
    "end_date = '2020-09-14'\n",
    "mask = (df2['Date'] >= start_date) & (df2['Date'] <= end_date)\n",
    "df4 = df2.loc[mask]\n",
    "df4.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fe0b7fc7e20>"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_axes([0,0,1,1])\n",
    "ax.plot(df4.Date,df4.Returns, label= 'real returns on the test set', color='r')\n",
    "ax.plot(df4.Date,df4.Returns_predicted, label= 'predicted returns on the test set', color='b')\n",
    "ax.legend(loc=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fe0b7e42eb0>"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_axes([0,0,1,1])\n",
    "ax.plot(df4.Date,df4.error, label= 'error returns on the test set', color='g')\n",
    "#ax.plot(df4.Date,df4.Returns_predicted, label= 'predicted return on the test set', color='b')\n",
    "ax.legend(loc=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
